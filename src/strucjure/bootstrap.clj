(ns strucjure.bootstrap)

;; Pre-compiled parsers to bootstrap strucjure's syntax
(def optional (quote (clojure.core/letfn [(thunk__4216 [input__4211 true-cont__4212 false-cont__4213] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4211) (clojure.core/nil? input__4211)) (clojure.core/let [left__4215 (clojure.core/seq input__4211)] (clojure.core/let [rest left__4215] (clojure.core/let [output__4214 nil] (.invoke true-cont__4212 output__4214 rest)))) (.invoke false-cont__4213)))] (clojure.core/fn [elem] (strucjure/->View (clojure.core/fn [input__4211 true-cont__4212 false-cont__4213] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4211) (clojure.core/nil? input__4211)) (clojure.core/let [left__4217 (clojure.core/seq input__4211)] (if (clojure.core/not= nil left__4217) (clojure.core/let [left__4218 (clojure.core/first left__4217)] ((.view-fn elem) left__4218 (clojure.core/fn [output__4219 rest__4220] (clojure.core/let [x output__4219] (if (clojure.core/= nil rest__4220) (clojure.core/let [left__4221 (clojure.core/next left__4217)] (clojure.core/let [rest left__4221] (clojure.core/let [output__4214 x] (.invoke true-cont__4212 output__4214 rest)))) (thunk__4216 input__4211 true-cont__4212 false-cont__4213)))) (clojure.core/fn [] (thunk__4216 input__4211 true-cont__4212 false-cont__4213)))) (thunk__4216 input__4211 true-cont__4212 false-cont__4213))) (thunk__4216 input__4211 true-cont__4212 false-cont__4213)))))))) (def zero-or-more (quote (clojure.core/letfn [(thunk__4227 [input__4222 true-cont__4223 false-cont__4224] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4222) (clojure.core/nil? input__4222)) (clojure.core/let [left__4226 (clojure.core/seq input__4222)] (clojure.core/let [rest left__4226] (clojure.core/let [output__4225 nil] (.invoke true-cont__4223 output__4225 rest)))) (.invoke false-cont__4224)))] (clojure.core/fn [elem] (strucjure/->View (clojure.core/fn [input__4222 true-cont__4223 false-cont__4224] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4222) (clojure.core/nil? input__4222)) (clojure.core/let [left__4228 (clojure.core/seq input__4222)] (if (clojure.core/not= nil left__4228) (clojure.core/let [left__4229 (clojure.core/first left__4228)] ((.view-fn elem) left__4229 (clojure.core/fn [output__4230 rest__4231] (clojure.core/let [x output__4230] (if (clojure.core/= nil rest__4231) (clojure.core/let [left__4232 (clojure.core/next left__4228)] ((.view-fn (zero-or-more elem)) left__4232 (clojure.core/fn [output__4233 rest__4234] (clojure.core/let [xs output__4233] (clojure.core/let [rest rest__4234] (clojure.core/let [output__4225 (cons x xs)] (.invoke true-cont__4223 output__4225 rest))))) (clojure.core/fn [] (thunk__4227 input__4222 true-cont__4223 false-cont__4224)))) (thunk__4227 input__4222 true-cont__4223 false-cont__4224)))) (clojure.core/fn [] (thunk__4227 input__4222 true-cont__4223 false-cont__4224)))) (thunk__4227 input__4222 true-cont__4223 false-cont__4224))) (thunk__4227 input__4222 true-cont__4223 false-cont__4224)))))))) (def one-or-more (quote (clojure.core/letfn [] (clojure.core/fn [elem] (strucjure/->View (clojure.core/fn [input__4235 true-cont__4236 false-cont__4237] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4235) (clojure.core/nil? input__4235)) (clojure.core/let [left__4239 (clojure.core/seq input__4235)] (if (clojure.core/not= nil left__4239) (clojure.core/let [left__4240 (clojure.core/first left__4239)] ((.view-fn elem) left__4240 (clojure.core/fn [output__4241 rest__4242] (clojure.core/let [x output__4241] (if (clojure.core/= nil rest__4242) (clojure.core/let [left__4243 (clojure.core/next left__4239)] ((.view-fn (zero-or-more elem)) left__4243 (clojure.core/fn [output__4244 rest__4245] (clojure.core/let [xs output__4244] (clojure.core/let [rest rest__4245] (clojure.core/let [output__4238 (cons x xs)] (.invoke true-cont__4236 output__4238 rest))))) (clojure.core/fn [] (.invoke false-cont__4237)))) (.invoke false-cont__4237)))) (clojure.core/fn [] (.invoke false-cont__4237)))) (.invoke false-cont__4237))) (.invoke false-cont__4237)))))))) (def key&pattern (quote (clojure.core/letfn [] (strucjure/->View (clojure.core/fn [input__4246 true-cont__4247 false-cont__4248] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4246) (clojure.core/nil? input__4246)) (clojure.core/let [left__4250 (clojure.core/seq input__4246)] (if (clojure.core/not= nil left__4250) (clojure.core/let [left__4251 (clojure.core/first left__4250)] (clojure.core/let [key left__4251] (clojure.core/let [left__4252 (clojure.core/next left__4250)] (if (clojure.core/not= nil left__4252) (clojure.core/let [left__4253 (clojure.core/first left__4252)] ((.view-fn pattern) left__4253 (clojure.core/fn [output__4254 rest__4255] (clojure.core/let [pattern output__4254] (if (clojure.core/= nil rest__4255) (clojure.core/let [left__4256 (clojure.core/next left__4252)] (if (clojure.core/= nil left__4256) (clojure.core/let [output__4249 [key pattern]] (.invoke true-cont__4247 output__4249 nil)) (.invoke false-cont__4248))) (.invoke false-cont__4248)))) (clojure.core/fn [] (.invoke false-cont__4248)))) (.invoke false-cont__4248))))) (.invoke false-cont__4248))) (.invoke false-cont__4248))))))) (def pattern (quote (clojure.core/letfn [(thunk__4268 [input__4257 true-cont__4258 false-cont__4259] (if (seq? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4261 (clojure.core/seq input__4257)] (if (clojure.core/not= nil left__4261) (clojure.core/let [left__4262 (clojure.core/first left__4261)] (clojure.core/let [view left__4262] (clojure.core/let [left__4263 (clojure.core/next left__4261)] (if (clojure.core/not= nil left__4263) (clojure.core/let [left__4264 (clojure.core/first left__4263)] ((.view-fn pattern) left__4264 (clojure.core/fn [output__4265 rest__4266] (clojure.core/let [pattern output__4265] (if (clojure.core/= nil rest__4266) (clojure.core/let [left__4267 (clojure.core/next left__4263)] (if (clojure.core/= nil left__4267) (clojure.core/let [output__4260 (import-ast view pattern)] (.invoke true-cont__4258 output__4260 nil)) (.invoke false-cont__4259))) (.invoke false-cont__4259)))) (clojure.core/fn [] (.invoke false-cont__4259)))) (.invoke false-cont__4259))))) (.invoke false-cont__4259))) (.invoke false-cont__4259)) (.invoke false-cont__4259))) (thunk__4269 [input__4257 true-cont__4258 false-cont__4259] (if (symbol? input__4257) (clojure.core/let [variable input__4257] (clojure.core/let [output__4260 (literal-ast variable)] (.invoke true-cont__4258 output__4260 nil))) (thunk__4268 input__4257 true-cont__4258 false-cont__4259))) (thunk__4275 [input__4257 true-cont__4258 false-cont__4259] (if (seq? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4270 (clojure.core/seq input__4257)] (if (clojure.core/not= nil left__4270) (clojure.core/let [left__4271 (clojure.core/first left__4270)] (if (clojure.core/= (quote or) left__4271) (clojure.core/let [left__4272 (clojure.core/next left__4270)] ((.view-fn (one-or-more pattern)) left__4272 (clojure.core/fn [output__4273 rest__4274] (clojure.core/let [patterns output__4273] (if (clojure.core/= nil rest__4274) (clojure.core/let [output__4260 (apply or-ast patterns)] (.invoke true-cont__4258 output__4260 nil)) (thunk__4269 input__4257 true-cont__4258 false-cont__4259)))) (clojure.core/fn [] (thunk__4269 input__4257 true-cont__4258 false-cont__4259)))) (thunk__4269 input__4257 true-cont__4258 false-cont__4259))) (thunk__4269 input__4257 true-cont__4258 false-cont__4259))) (thunk__4269 input__4257 true-cont__4258 false-cont__4259)) (thunk__4269 input__4257 true-cont__4258 false-cont__4259))) (thunk__4281 [input__4257 true-cont__4258 false-cont__4259] (if (seq? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4276 (clojure.core/seq input__4257)] (if (clojure.core/not= nil left__4276) (clojure.core/let [left__4277 (clojure.core/first left__4276)] (if (clojure.core/= (quote seq) left__4277) (clojure.core/let [left__4278 (clojure.core/next left__4276)] ((.view-fn (one-or-more pattern)) left__4278 (clojure.core/fn [output__4279 rest__4280] (clojure.core/let [patterns output__4279] (if (clojure.core/= nil rest__4280) (clojure.core/let [output__4260 (apply seq-ast patterns)] (.invoke true-cont__4258 output__4260 nil)) (thunk__4275 input__4257 true-cont__4258 false-cont__4259)))) (clojure.core/fn [] (thunk__4275 input__4257 true-cont__4258 false-cont__4259)))) (thunk__4275 input__4257 true-cont__4258 false-cont__4259))) (thunk__4275 input__4257 true-cont__4258 false-cont__4259))) (thunk__4275 input__4257 true-cont__4258 false-cont__4259)) (thunk__4275 input__4257 true-cont__4258 false-cont__4259))) (thunk__4287 [input__4257 true-cont__4258 false-cont__4259] (if (seq? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4282 (clojure.core/seq input__4257)] (if (clojure.core/not= nil left__4282) (clojure.core/let [left__4283 (clojure.core/first left__4282)] (if (clojure.core/= (quote and) left__4283) (clojure.core/let [left__4284 (clojure.core/next left__4282)] ((.view-fn (one-or-more pattern)) left__4284 (clojure.core/fn [output__4285 rest__4286] (clojure.core/let [patterns output__4285] (if (clojure.core/= nil rest__4286) (clojure.core/let [output__4260 (apply and-ast patterns)] (.invoke true-cont__4258 output__4260 nil)) (thunk__4281 input__4257 true-cont__4258 false-cont__4259)))) (clojure.core/fn [] (thunk__4281 input__4257 true-cont__4258 false-cont__4259)))) (thunk__4281 input__4257 true-cont__4258 false-cont__4259))) (thunk__4281 input__4257 true-cont__4258 false-cont__4259))) (thunk__4281 input__4257 true-cont__4258 false-cont__4259)) (thunk__4281 input__4257 true-cont__4258 false-cont__4259))) (thunk__4293 [input__4257 true-cont__4258 false-cont__4259] (if (seq? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4288 (clojure.core/seq input__4257)] (if (clojure.core/not= nil left__4288) (clojure.core/let [left__4289 (clojure.core/first left__4288)] (if (clojure.core/= (quote guard) left__4289) (clojure.core/let [left__4290 (clojure.core/next left__4288)] (if (clojure.core/not= nil left__4290) (clojure.core/let [left__4291 (clojure.core/first left__4290)] (clojure.core/let [form left__4291] (clojure.core/let [left__4292 (clojure.core/next left__4290)] (if (clojure.core/= nil left__4292) (clojure.core/let [output__4260 (->Guard form)] (.invoke true-cont__4258 output__4260 nil)) (thunk__4287 input__4257 true-cont__4258 false-cont__4259))))) (thunk__4287 input__4257 true-cont__4258 false-cont__4259))) (thunk__4287 input__4257 true-cont__4258 false-cont__4259))) (thunk__4287 input__4257 true-cont__4258 false-cont__4259))) (thunk__4287 input__4257 true-cont__4258 false-cont__4259)) (thunk__4287 input__4257 true-cont__4258 false-cont__4259))) (thunk__4299 [input__4257 true-cont__4258 false-cont__4259] (if (seq? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4294 (clojure.core/seq input__4257)] (if (clojure.core/not= nil left__4294) (clojure.core/let [left__4295 (clojure.core/first left__4294)] (if (clojure.core/= (quote leave) left__4295) (clojure.core/let [left__4296 (clojure.core/next left__4294)] (if (clojure.core/not= nil left__4296) (clojure.core/let [left__4297 (clojure.core/first left__4296)] (clojure.core/let [form left__4297] (clojure.core/let [left__4298 (clojure.core/next left__4296)] (if (clojure.core/= nil left__4298) (clojure.core/let [output__4260 (->Leave form)] (.invoke true-cont__4258 output__4260 nil)) (thunk__4293 input__4257 true-cont__4258 false-cont__4259))))) (thunk__4293 input__4257 true-cont__4258 false-cont__4259))) (thunk__4293 input__4257 true-cont__4258 false-cont__4259))) (thunk__4293 input__4257 true-cont__4258 false-cont__4259))) (thunk__4293 input__4257 true-cont__4258 false-cont__4259)) (thunk__4293 input__4257 true-cont__4258 false-cont__4259))) (thunk__4305 [input__4257 true-cont__4258 false-cont__4259] (if (seq? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4300 (clojure.core/seq input__4257)] (if (clojure.core/not= nil left__4300) (clojure.core/let [left__4301 (clojure.core/first left__4300)] (if (clojure.core/= (quote quote) left__4301) (clojure.core/let [left__4302 (clojure.core/next left__4300)] (if (clojure.core/not= nil left__4302) (clojure.core/let [left__4303 (clojure.core/first left__4302)] (clojure.core/let [quoted left__4303] (clojure.core/let [left__4304 (clojure.core/next left__4302)] (if (clojure.core/= nil left__4304) (clojure.core/let [output__4260 (literal-ast (clojure.core/seq (clojure.core/concat (clojure.core/list (quote quote)) (clojure.core/list quoted))))] (.invoke true-cont__4258 output__4260 nil)) (thunk__4299 input__4257 true-cont__4258 false-cont__4259))))) (thunk__4299 input__4257 true-cont__4258 false-cont__4259))) (thunk__4299 input__4257 true-cont__4258 false-cont__4259))) (thunk__4299 input__4257 true-cont__4258 false-cont__4259))) (thunk__4299 input__4257 true-cont__4258 false-cont__4259)) (thunk__4299 input__4257 true-cont__4258 false-cont__4259))) (thunk__4309 [input__4257 true-cont__4258 false-cont__4259] (if (vector? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4306 (clojure.core/seq input__4257)] ((.view-fn (zero-or-more seq-pattern)) left__4306 (clojure.core/fn [output__4307 rest__4308] (clojure.core/let [seq-patterns output__4307] (if (clojure.core/= nil rest__4308) (clojure.core/let [output__4260 (seqable-ast seq-patterns)] (.invoke true-cont__4258 output__4260 nil)) (thunk__4305 input__4257 true-cont__4258 false-cont__4259)))) (clojure.core/fn [] (thunk__4305 input__4257 true-cont__4258 false-cont__4259)))) (thunk__4305 input__4257 true-cont__4258 false-cont__4259)) (thunk__4305 input__4257 true-cont__4258 false-cont__4259))) (thunk__4311 [input__4257 true-cont__4258] (clojure.core/let [predicate input__4257] (clojure.core/let [output__4260 (predicate-ast predicate)] (.invoke true-cont__4258 output__4260 nil)))) (thunk__4316 [input__4257 true-cont__4258 false-cont__4259 input__4257 left__4312 left__4312 left__4312 true-case-input__4314] (if (clojure.core/= nil true-case-input__4314) (clojure.core/let [left__4315 (clojure.core/next left__4312)] (thunk__4311 input__4257 true-cont__4258)) (thunk__4309 input__4257 true-cont__4258 false-cont__4259))) (thunk__4317 [input__4257 true-cont__4258 false-cont__4259 input__4257 left__4312 left__4312 left__4312 left__4313 left__4313] (if (clojure.core/= (quote fn*) left__4313) (thunk__4316 input__4257 true-cont__4258 false-cont__4259 input__4257 left__4312 left__4312 left__4312 nil) (thunk__4309 input__4257 true-cont__4258 false-cont__4259))) (thunk__4318 [input__4257 true-cont__4258 false-cont__4259] (if (predicate? input__4257) (thunk__4311 input__4257 true-cont__4258) (if (seq? input__4257) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4312 (clojure.core/seq input__4257)] (if (clojure.core/not= nil left__4312) (clojure.core/let [left__4313 (clojure.core/first left__4312)] (if (clojure.core/= (quote fn) left__4313) (thunk__4316 input__4257 true-cont__4258 false-cont__4259 input__4257 left__4312 left__4312 left__4312 nil) (thunk__4317 input__4257 true-cont__4258 false-cont__4259 input__4257 left__4312 left__4312 left__4312 left__4313 left__4313))) (thunk__4309 input__4257 true-cont__4258 false-cont__4259))) (thunk__4309 input__4257 true-cont__4258 false-cont__4259)) (thunk__4309 input__4257 true-cont__4258 false-cont__4259)))) (thunk__4319 [input__4257 true-cont__4258 false-cont__4259] (if (clojure.core/instance? java.util.regex.Pattern input__4257) (clojure.core/let [regex input__4257] (clojure.core/let [output__4260 (regex-ast regex)] (.invoke true-cont__4258 output__4260 nil))) (thunk__4318 input__4257 true-cont__4258 false-cont__4259))) (thunk__4324 [input__4257 true-cont__4258 false-cont__4259] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4257) (clojure.core/nil? input__4257)) (clojure.core/let [left__4321 (clojure.core/seq input__4257)] ((.view-fn (zero-or-more key&pattern)) left__4321 (clojure.core/fn [output__4322 rest__4323] (clojure.core/let [keys&patterns output__4322] (if (clojure.core/= nil rest__4323) (clojure.core/let [output__4260 (map-ast keys&patterns)] (.invoke true-cont__4258 output__4260 nil)) (thunk__4319 input__4257 true-cont__4258 false-cont__4259)))) (clojure.core/fn [] (thunk__4319 input__4257 true-cont__4258 false-cont__4259)))) (thunk__4319 input__4257 true-cont__4258 false-cont__4259))) (thunk__4325 [input__4257 true-cont__4258 false-cont__4259] (if (clojure.core/instance? clojure.lang.PersistentHashMap input__4257) (thunk__4324 input__4257 true-cont__4258 false-cont__4259) (thunk__4319 input__4257 true-cont__4258 false-cont__4259))) (thunk__4326 [input__4257 true-cont__4258 false-cont__4259] (if (clojure.core/instance? clojure.lang.PersistentArrayMap input__4257) (thunk__4324 input__4257 true-cont__4258 false-cont__4259) (thunk__4325 input__4257 true-cont__4258 false-cont__4259))) (thunk__4327 [input__4257 true-cont__4258 false-cont__4259] (if (class-name? input__4257) (clojure.core/let [class-name input__4257] (clojure.core/let [output__4260 (class-ast class-name)] (.invoke true-cont__4258 output__4260 nil))) (thunk__4326 input__4257 true-cont__4258 false-cont__4259))) (thunk__4328 [input__4257 true-cont__4258 false-cont__4259] (if (primitive? input__4257) (clojure.core/let [literal input__4257] (clojure.core/let [output__4260 (literal-ast literal)] (.invoke true-cont__4258 output__4260 nil))) (thunk__4327 input__4257 true-cont__4258 false-cont__4259))) (thunk__4329 [input__4257 true-cont__4258 false-cont__4259] (if (binding? input__4257) (clojure.core/let [binding input__4257] (clojure.core/let [output__4260 (->Bind (binding-name binding))] (.invoke true-cont__4258 output__4260 nil))) (thunk__4328 input__4257 true-cont__4258 false-cont__4259)))] (strucjure/->View (clojure.core/fn [input__4257 true-cont__4258 false-cont__4259] (if (clojure.core/= (quote _) input__4257) (clojure.core/let [output__4260 (->Leave nil)] (.invoke true-cont__4258 output__4260 nil)) (thunk__4329 input__4257 true-cont__4258 false-cont__4259))))))) (def seq-pattern (quote (clojure.core/letfn [(thunk__4336 [input__4330 true-cont__4331 false-cont__4332] ((.view-fn pattern) input__4330 (clojure.core/fn [output__4334 rest__4335] (clojure.core/let [pattern output__4334] (clojure.core/let [output__4333 (head-ast pattern)] (.invoke true-cont__4331 output__4333 rest__4335)))) (clojure.core/fn [] (.invoke false-cont__4332)))) (thunk__4342 [input__4330 true-cont__4331 false-cont__4332] (if (seq? input__4330) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4330) (clojure.core/nil? input__4330)) (clojure.core/let [left__4337 (clojure.core/seq input__4330)] (if (clojure.core/not= nil left__4337) (clojure.core/let [left__4338 (clojure.core/first left__4337)] (if (clojure.core/= (quote guard) left__4338) (clojure.core/let [left__4339 (clojure.core/next left__4337)] (if (clojure.core/not= nil left__4339) (clojure.core/let [left__4340 (clojure.core/first left__4339)] (clojure.core/let [form left__4340] (clojure.core/let [left__4341 (clojure.core/next left__4339)] (if (clojure.core/= nil left__4341) (clojure.core/let [output__4333 (->Guard form)] (.invoke true-cont__4331 output__4333 nil)) (thunk__4336 input__4330 true-cont__4331 false-cont__4332))))) (thunk__4336 input__4330 true-cont__4331 false-cont__4332))) (thunk__4336 input__4330 true-cont__4331 false-cont__4332))) (thunk__4336 input__4330 true-cont__4331 false-cont__4332))) (thunk__4336 input__4330 true-cont__4331 false-cont__4332)) (thunk__4336 input__4330 true-cont__4331 false-cont__4332)))] (strucjure/->View (clojure.core/fn [input__4330 true-cont__4331 false-cont__4332] (if (seq? input__4330) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__4330) (clojure.core/nil? input__4330)) (clojure.core/let [left__4343 (clojure.core/seq input__4330)] (if (clojure.core/not= nil left__4343) (clojure.core/let [left__4344 (clojure.core/first left__4343)] (if (clojure.core/= (quote &) left__4344) (clojure.core/let [left__4345 (clojure.core/next left__4343)] (if (clojure.core/not= nil left__4345) (clojure.core/let [left__4346 (clojure.core/first left__4345)] ((.view-fn pattern) left__4346 (clojure.core/fn [output__4347 rest__4348] (clojure.core/let [pattern output__4347] (if (clojure.core/= nil rest__4348) (clojure.core/let [left__4349 (clojure.core/next left__4345)] (if (clojure.core/= nil left__4349) (clojure.core/let [output__4333 pattern] (.invoke true-cont__4331 output__4333 nil)) (thunk__4342 input__4330 true-cont__4331 false-cont__4332))) (thunk__4342 input__4330 true-cont__4331 false-cont__4332)))) (clojure.core/fn [] (thunk__4342 input__4330 true-cont__4331 false-cont__4332)))) (thunk__4342 input__4330 true-cont__4331 false-cont__4332))) (thunk__4342 input__4330 true-cont__4331 false-cont__4332))) (thunk__4342 input__4330 true-cont__4331 false-cont__4332))) (thunk__4342 input__4330 true-cont__4331 false-cont__4332)) (thunk__4342 input__4330 true-cont__4331 false-cont__4332)))))))
