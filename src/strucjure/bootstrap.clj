(ns strucjure.bootstrap)

;; Pre-compiled parsers to bootstrap strucjure's syntax
(def optional (quote (clojure.core/letfn [(thunk__6823 [input__6818 true-cont__6819 false-cont__6820] (if (or (instance? clojure.lang.Seqable input__6818) (nil? input__6818)) (clojure.core/let [left__6822 (clojure.core/seq input__6818)] (clojure.core/let [rest left__6822] (clojure.core/let [output__6821 nil] (.invoke true-cont__6819 output__6821 rest)))) (.invoke false-cont__6820)))] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__6818 true-cont__6819 false-cont__6820] (if (or (instance? clojure.lang.Seqable input__6818) (nil? input__6818)) (clojure.core/let [left__6824 (clojure.core/seq input__6818)] (if (clojure.core/not= nil left__6824) (clojure.core/let [left__6825 (clojure.core/first left__6824)] ((.match-fn elem) left__6825 (clojure.core/fn [output__6826 rest__6827] (clojure.core/let [x output__6826] (if (clojure.core/= nil rest__6827) (clojure.core/let [left__6828 (clojure.core/next left__6824)] (clojure.core/let [rest left__6828] (clojure.core/let [output__6821 x] (.invoke true-cont__6819 output__6821 rest)))) (thunk__6823 input__6818 true-cont__6819 false-cont__6820)))) (clojure.core/fn [] (thunk__6823 input__6818 true-cont__6819 false-cont__6820)))) (thunk__6823 input__6818 true-cont__6819 false-cont__6820))) (thunk__6823 input__6818 true-cont__6819 false-cont__6820)))))))) (def zero-or-more (quote (clojure.core/letfn [(thunk__6834 [input__6829 true-cont__6830 false-cont__6831] (if (or (instance? clojure.lang.Seqable input__6829) (nil? input__6829)) (clojure.core/let [left__6833 (clojure.core/seq input__6829)] (clojure.core/let [rest left__6833] (clojure.core/let [output__6832 nil] (.invoke true-cont__6830 output__6832 rest)))) (.invoke false-cont__6831)))] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__6829 true-cont__6830 false-cont__6831] (if (or (instance? clojure.lang.Seqable input__6829) (nil? input__6829)) (clojure.core/let [left__6835 (clojure.core/seq input__6829)] (if (clojure.core/not= nil left__6835) (clojure.core/let [left__6836 (clojure.core/first left__6835)] ((.match-fn elem) left__6836 (clojure.core/fn [output__6837 rest__6838] (clojure.core/let [x output__6837] (if (clojure.core/= nil rest__6838) (clojure.core/let [left__6839 (clojure.core/next left__6835)] ((.match-fn (zero-or-more elem)) left__6839 (clojure.core/fn [output__6840 rest__6841] (clojure.core/let [xs output__6840] (clojure.core/let [rest rest__6841] (clojure.core/let [output__6832 (cons x xs)] (.invoke true-cont__6830 output__6832 rest))))) (clojure.core/fn [] (thunk__6834 input__6829 true-cont__6830 false-cont__6831)))) (thunk__6834 input__6829 true-cont__6830 false-cont__6831)))) (clojure.core/fn [] (thunk__6834 input__6829 true-cont__6830 false-cont__6831)))) (thunk__6834 input__6829 true-cont__6830 false-cont__6831))) (thunk__6834 input__6829 true-cont__6830 false-cont__6831)))))))) (def one-or-more (quote (clojure.core/letfn [] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__6842 true-cont__6843 false-cont__6844] (if (or (instance? clojure.lang.Seqable input__6842) (nil? input__6842)) (clojure.core/let [left__6846 (clojure.core/seq input__6842)] (if (clojure.core/not= nil left__6846) (clojure.core/let [left__6847 (clojure.core/first left__6846)] ((.match-fn elem) left__6847 (clojure.core/fn [output__6848 rest__6849] (clojure.core/let [x output__6848] (if (clojure.core/= nil rest__6849) (clojure.core/let [left__6850 (clojure.core/next left__6846)] ((.match-fn (zero-or-more elem)) left__6850 (clojure.core/fn [output__6851 rest__6852] (clojure.core/let [xs output__6851] (clojure.core/let [rest rest__6852] (clojure.core/let [output__6845 (cons x xs)] (.invoke true-cont__6843 output__6845 rest))))) (clojure.core/fn [] (.invoke false-cont__6844)))) (.invoke false-cont__6844)))) (clojure.core/fn [] (.invoke false-cont__6844)))) (.invoke false-cont__6844))) (.invoke false-cont__6844)))))))) (def pattern (quote (clojure.core/letfn [(thunk__6864 [input__6853 true-cont__6854 false-cont__6855] (if (seq? input__6853) (if (or (instance? clojure.lang.Seqable input__6853) (nil? input__6853)) (clojure.core/let [left__6857 (clojure.core/seq input__6853)] (if (clojure.core/not= nil left__6857) (clojure.core/let [left__6858 (clojure.core/first left__6857)] (clojure.core/let [match left__6858] (clojure.core/let [left__6859 (clojure.core/next left__6857)] (if (clojure.core/not= nil left__6859) (clojure.core/let [left__6860 (clojure.core/first left__6859)] ((.match-fn pattern) left__6860 (clojure.core/fn [output__6861 rest__6862] (clojure.core/let [pattern output__6861] (if (clojure.core/= nil rest__6862) (clojure.core/let [left__6863 (clojure.core/next left__6859)] (if (clojure.core/= nil left__6863) (clojure.core/let [output__6856 (import-ast match pattern)] (.invoke true-cont__6854 output__6856 nil)) (.invoke false-cont__6855))) (.invoke false-cont__6855)))) (clojure.core/fn [] (.invoke false-cont__6855)))) (.invoke false-cont__6855))))) (.invoke false-cont__6855))) (.invoke false-cont__6855)) (.invoke false-cont__6855))) (thunk__6865 [input__6853 true-cont__6854 false-cont__6855] (if (symbol? input__6853) (clojure.core/let [variable input__6853] (clojure.core/let [output__6856 (literal-ast variable)] (.invoke true-cont__6854 output__6856 nil))) (thunk__6864 input__6853 true-cont__6854 false-cont__6855))) (thunk__6871 [input__6853 true-cont__6854 false-cont__6855] (if (seq? input__6853) (if (or (instance? clojure.lang.Seqable input__6853) (nil? input__6853)) (clojure.core/let [left__6866 (clojure.core/seq input__6853)] (if (clojure.core/not= nil left__6866) (clojure.core/let [left__6867 (clojure.core/first left__6866)] (if (clojure.core/= (quote or) left__6867) (clojure.core/let [left__6868 (clojure.core/next left__6866)] ((.match-fn (one-or-more pattern)) left__6868 (clojure.core/fn [output__6869 rest__6870] (clojure.core/let [patterns output__6869] (if (clojure.core/= nil rest__6870) (clojure.core/let [output__6856 (apply or-ast patterns)] (.invoke true-cont__6854 output__6856 nil)) (thunk__6865 input__6853 true-cont__6854 false-cont__6855)))) (clojure.core/fn [] (thunk__6865 input__6853 true-cont__6854 false-cont__6855)))) (thunk__6865 input__6853 true-cont__6854 false-cont__6855))) (thunk__6865 input__6853 true-cont__6854 false-cont__6855))) (thunk__6865 input__6853 true-cont__6854 false-cont__6855)) (thunk__6865 input__6853 true-cont__6854 false-cont__6855))) (thunk__6877 [input__6853 true-cont__6854 false-cont__6855] (if (seq? input__6853) (if (or (instance? clojure.lang.Seqable input__6853) (nil? input__6853)) (clojure.core/let [left__6872 (clojure.core/seq input__6853)] (if (clojure.core/not= nil left__6872) (clojure.core/let [left__6873 (clojure.core/first left__6872)] (if (clojure.core/= (quote seq) left__6873) (clojure.core/let [left__6874 (clojure.core/next left__6872)] ((.match-fn (one-or-more pattern)) left__6874 (clojure.core/fn [output__6875 rest__6876] (clojure.core/let [patterns output__6875] (if (clojure.core/= nil rest__6876) (clojure.core/let [output__6856 (apply seq-ast patterns)] (.invoke true-cont__6854 output__6856 nil)) (thunk__6871 input__6853 true-cont__6854 false-cont__6855)))) (clojure.core/fn [] (thunk__6871 input__6853 true-cont__6854 false-cont__6855)))) (thunk__6871 input__6853 true-cont__6854 false-cont__6855))) (thunk__6871 input__6853 true-cont__6854 false-cont__6855))) (thunk__6871 input__6853 true-cont__6854 false-cont__6855)) (thunk__6871 input__6853 true-cont__6854 false-cont__6855))) (thunk__6883 [input__6853 true-cont__6854 false-cont__6855] (if (seq? input__6853) (if (or (instance? clojure.lang.Seqable input__6853) (nil? input__6853)) (clojure.core/let [left__6878 (clojure.core/seq input__6853)] (if (clojure.core/not= nil left__6878) (clojure.core/let [left__6879 (clojure.core/first left__6878)] (if (clojure.core/= (quote and) left__6879) (clojure.core/let [left__6880 (clojure.core/next left__6878)] ((.match-fn (one-or-more pattern)) left__6880 (clojure.core/fn [output__6881 rest__6882] (clojure.core/let [patterns output__6881] (if (clojure.core/= nil rest__6882) (clojure.core/let [output__6856 (apply and-ast patterns)] (.invoke true-cont__6854 output__6856 nil)) (thunk__6877 input__6853 true-cont__6854 false-cont__6855)))) (clojure.core/fn [] (thunk__6877 input__6853 true-cont__6854 false-cont__6855)))) (thunk__6877 input__6853 true-cont__6854 false-cont__6855))) (thunk__6877 input__6853 true-cont__6854 false-cont__6855))) (thunk__6877 input__6853 true-cont__6854 false-cont__6855)) (thunk__6877 input__6853 true-cont__6854 false-cont__6855))) (thunk__6889 [input__6853 true-cont__6854 false-cont__6855] (if (seq? input__6853) (if (or (instance? clojure.lang.Seqable input__6853) (nil? input__6853)) (clojure.core/let [left__6884 (clojure.core/seq input__6853)] (if (clojure.core/not= nil left__6884) (clojure.core/let [left__6885 (clojure.core/first left__6884)] (if (clojure.core/= (quote leave) left__6885) (clojure.core/let [left__6886 (clojure.core/next left__6884)] (if (clojure.core/not= nil left__6886) (clojure.core/let [left__6887 (clojure.core/first left__6886)] (clojure.core/let [form left__6887] (clojure.core/let [left__6888 (clojure.core/next left__6886)] (if (clojure.core/= nil left__6888) (clojure.core/let [output__6856 (->Leave form)] (.invoke true-cont__6854 output__6856 nil)) (thunk__6883 input__6853 true-cont__6854 false-cont__6855))))) (thunk__6883 input__6853 true-cont__6854 false-cont__6855))) (thunk__6883 input__6853 true-cont__6854 false-cont__6855))) (thunk__6883 input__6853 true-cont__6854 false-cont__6855))) (thunk__6883 input__6853 true-cont__6854 false-cont__6855)) (thunk__6883 input__6853 true-cont__6854 false-cont__6855))) (thunk__6895 [input__6853 true-cont__6854 false-cont__6855] (if (seq? input__6853) (if (or (instance? clojure.lang.Seqable input__6853) (nil? input__6853)) (clojure.core/let [left__6890 (clojure.core/seq input__6853)] (if (clojure.core/not= nil left__6890) (clojure.core/let [left__6891 (clojure.core/first left__6890)] (if (clojure.core/= (quote guard) left__6891) (clojure.core/let [left__6892 (clojure.core/next left__6890)] (if (clojure.core/not= nil left__6892) (clojure.core/let [left__6893 (clojure.core/first left__6892)] (clojure.core/let [form left__6893] (clojure.core/let [left__6894 (clojure.core/next left__6892)] (if (clojure.core/= nil left__6894) (clojure.core/let [output__6856 (->Guard form)] (.invoke true-cont__6854 output__6856 nil)) (thunk__6889 input__6853 true-cont__6854 false-cont__6855))))) (thunk__6889 input__6853 true-cont__6854 false-cont__6855))) (thunk__6889 input__6853 true-cont__6854 false-cont__6855))) (thunk__6889 input__6853 true-cont__6854 false-cont__6855))) (thunk__6889 input__6853 true-cont__6854 false-cont__6855)) (thunk__6889 input__6853 true-cont__6854 false-cont__6855))) (thunk__6901 [input__6853 true-cont__6854 false-cont__6855] (if (seq? input__6853) (if (or (instance? clojure.lang.Seqable input__6853) (nil? input__6853)) (clojure.core/let [left__6896 (clojure.core/seq input__6853)] (if (clojure.core/not= nil left__6896) (clojure.core/let [left__6897 (clojure.core/first left__6896)] (if (clojure.core/= (quote quote) left__6897) (clojure.core/let [left__6898 (clojure.core/next left__6896)] (if (clojure.core/not= nil left__6898) (clojure.core/let [left__6899 (clojure.core/first left__6898)] (clojure.core/let [quoted left__6899] (clojure.core/let [left__6900 (clojure.core/next left__6898)] (if (clojure.core/= nil left__6900) (clojure.core/let [output__6856 (literal-ast (clojure.core/seq (clojure.core/concat (clojure.core/list (quote quote)) (clojure.core/list quoted))))] (.invoke true-cont__6854 output__6856 nil)) (thunk__6895 input__6853 true-cont__6854 false-cont__6855))))) (thunk__6895 input__6853 true-cont__6854 false-cont__6855))) (thunk__6895 input__6853 true-cont__6854 false-cont__6855))) (thunk__6895 input__6853 true-cont__6854 false-cont__6855))) (thunk__6895 input__6853 true-cont__6854 false-cont__6855)) (thunk__6895 input__6853 true-cont__6854 false-cont__6855))) (thunk__6905 [input__6853 true-cont__6854 false-cont__6855] (if (vector? input__6853) (if (or (instance? clojure.lang.Seqable input__6853) (nil? input__6853)) (clojure.core/let [left__6902 (clojure.core/seq input__6853)] ((.match-fn (zero-or-more seq-pattern)) left__6902 (clojure.core/fn [output__6903 rest__6904] (clojure.core/let [seq-patterns output__6903] (if (clojure.core/= nil rest__6904) (clojure.core/let [output__6856 (seqable-ast seq-patterns)] (.invoke true-cont__6854 output__6856 nil)) (thunk__6901 input__6853 true-cont__6854 false-cont__6855)))) (clojure.core/fn [] (thunk__6901 input__6853 true-cont__6854 false-cont__6855)))) (thunk__6901 input__6853 true-cont__6854 false-cont__6855)) (thunk__6901 input__6853 true-cont__6854 false-cont__6855))) (thunk__6906 [input__6853 true-cont__6854 false-cont__6855] (if (class-name? input__6853) (clojure.core/let [class-name input__6853] (clojure.core/let [output__6856 (class-ast class-name)] (.invoke true-cont__6854 output__6856 nil))) (thunk__6905 input__6853 true-cont__6854 false-cont__6855))) (thunk__6907 [input__6853 true-cont__6854 false-cont__6855] (if (primitive? input__6853) (clojure.core/let [literal input__6853] (clojure.core/let [output__6856 (literal-ast literal)] (.invoke true-cont__6854 output__6856 nil))) (thunk__6906 input__6853 true-cont__6854 false-cont__6855))) (thunk__6908 [input__6853 true-cont__6854 false-cont__6855] (if (binding? input__6853) (clojure.core/let [binding input__6853] (clojure.core/let [output__6856 (->Bind (binding-name binding))] (.invoke true-cont__6854 output__6856 nil))) (thunk__6907 input__6853 true-cont__6854 false-cont__6855)))] (strucjure/->Match (clojure.core/fn [input__6853 true-cont__6854 false-cont__6855] (if (clojure.core/= (quote _) input__6853) (clojure.core/let [output__6856 (->Leave nil)] (.invoke true-cont__6854 output__6856 nil)) (thunk__6908 input__6853 true-cont__6854 false-cont__6855))))))) (def seq-pattern (quote (clojure.core/letfn [(thunk__6915 [input__6909 true-cont__6910 false-cont__6911] ((.match-fn pattern) input__6909 (clojure.core/fn [output__6913 rest__6914] (clojure.core/let [pattern output__6913] (clojure.core/let [output__6912 (head-ast pattern)] (.invoke true-cont__6910 output__6912 rest__6914)))) (clojure.core/fn [] (.invoke false-cont__6911)))) (thunk__6921 [input__6909 true-cont__6910 false-cont__6911] (if (seq? input__6909) (if (or (instance? clojure.lang.Seqable input__6909) (nil? input__6909)) (clojure.core/let [left__6916 (clojure.core/seq input__6909)] (if (clojure.core/not= nil left__6916) (clojure.core/let [left__6917 (clojure.core/first left__6916)] (if (clojure.core/= (quote guard) left__6917) (clojure.core/let [left__6918 (clojure.core/next left__6916)] (if (clojure.core/not= nil left__6918) (clojure.core/let [left__6919 (clojure.core/first left__6918)] (clojure.core/let [form left__6919] (clojure.core/let [left__6920 (clojure.core/next left__6918)] (if (clojure.core/= nil left__6920) (clojure.core/let [output__6912 (->Guard form)] (.invoke true-cont__6910 output__6912 nil)) (thunk__6915 input__6909 true-cont__6910 false-cont__6911))))) (thunk__6915 input__6909 true-cont__6910 false-cont__6911))) (thunk__6915 input__6909 true-cont__6910 false-cont__6911))) (thunk__6915 input__6909 true-cont__6910 false-cont__6911))) (thunk__6915 input__6909 true-cont__6910 false-cont__6911)) (thunk__6915 input__6909 true-cont__6910 false-cont__6911)))] (strucjure/->Match (clojure.core/fn [input__6909 true-cont__6910 false-cont__6911] (if (seq? input__6909) (if (or (instance? clojure.lang.Seqable input__6909) (nil? input__6909)) (clojure.core/let [left__6922 (clojure.core/seq input__6909)] (if (clojure.core/not= nil left__6922) (clojure.core/let [left__6923 (clojure.core/first left__6922)] (if (clojure.core/= (quote &) left__6923) (clojure.core/let [left__6924 (clojure.core/next left__6922)] (if (clojure.core/not= nil left__6924) (clojure.core/let [left__6925 (clojure.core/first left__6924)] ((.match-fn pattern) left__6925 (clojure.core/fn [output__6926 rest__6927] (clojure.core/let [pattern output__6926] (if (clojure.core/= nil rest__6927) (clojure.core/let [left__6928 (clojure.core/next left__6924)] (if (clojure.core/= nil left__6928) (clojure.core/let [output__6912 pattern] (.invoke true-cont__6910 output__6912 nil)) (thunk__6921 input__6909 true-cont__6910 false-cont__6911))) (thunk__6921 input__6909 true-cont__6910 false-cont__6911)))) (clojure.core/fn [] (thunk__6921 input__6909 true-cont__6910 false-cont__6911)))) (thunk__6921 input__6909 true-cont__6910 false-cont__6911))) (thunk__6921 input__6909 true-cont__6910 false-cont__6911))) (thunk__6921 input__6909 true-cont__6910 false-cont__6911))) (thunk__6921 input__6909 true-cont__6910 false-cont__6911)) (thunk__6921 input__6909 true-cont__6910 false-cont__6911)))))))
