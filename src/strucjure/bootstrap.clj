(ns strucjure.bootstrap)

;; Pre-compiled parsers to bootstrap strucjure's syntax
(def optional (quote (clojure.core/letfn [(thunk__2555 [input__2550 true-cont__2551 false-cont__2552] (if (or (instance? clojure.lang.Seqable input__2550) (nil? input__2550)) (clojure.core/let [left__2554 (clojure.core/seq input__2550)] (clojure.core/let [rest left__2554] (clojure.core/let [output__2553 nil] (.invoke true-cont__2551 output__2553 rest)))) (.invoke false-cont__2552)))] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__2550 true-cont__2551 false-cont__2552] (if (or (instance? clojure.lang.Seqable input__2550) (nil? input__2550)) (clojure.core/let [left__2556 (clojure.core/seq input__2550)] (if (clojure.core/not= nil left__2556) (clojure.core/let [left__2557 (clojure.core/first left__2556)] ((.match-fn elem) left__2557 (clojure.core/fn [output__2558 rest__2559] (clojure.core/let [x output__2558] (if (clojure.core/= nil rest__2559) (clojure.core/let [left__2560 (clojure.core/next left__2556)] (clojure.core/let [rest left__2560] (clojure.core/let [output__2553 x] (.invoke true-cont__2551 output__2553 rest)))) (thunk__2555 input__2550 true-cont__2551 false-cont__2552)))) (clojure.core/fn [] (thunk__2555 input__2550 true-cont__2551 false-cont__2552)))) (thunk__2555 input__2550 true-cont__2551 false-cont__2552))) (thunk__2555 input__2550 true-cont__2551 false-cont__2552)))))))) (def zero-or-more (quote (clojure.core/letfn [(thunk__2566 [input__2561 true-cont__2562 false-cont__2563] (if (or (instance? clojure.lang.Seqable input__2561) (nil? input__2561)) (clojure.core/let [left__2565 (clojure.core/seq input__2561)] (clojure.core/let [rest left__2565] (clojure.core/let [output__2564 nil] (.invoke true-cont__2562 output__2564 rest)))) (.invoke false-cont__2563)))] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__2561 true-cont__2562 false-cont__2563] (if (or (instance? clojure.lang.Seqable input__2561) (nil? input__2561)) (clojure.core/let [left__2567 (clojure.core/seq input__2561)] (if (clojure.core/not= nil left__2567) (clojure.core/let [left__2568 (clojure.core/first left__2567)] ((.match-fn elem) left__2568 (clojure.core/fn [output__2569 rest__2570] (clojure.core/let [x output__2569] (if (clojure.core/= nil rest__2570) (clojure.core/let [left__2571 (clojure.core/next left__2567)] ((.match-fn (zero-or-more elem)) left__2571 (clojure.core/fn [output__2572 rest__2573] (clojure.core/let [xs output__2572] (clojure.core/let [rest rest__2573] (clojure.core/let [output__2564 (cons x xs)] (.invoke true-cont__2562 output__2564 rest))))) (clojure.core/fn [] (thunk__2566 input__2561 true-cont__2562 false-cont__2563)))) (thunk__2566 input__2561 true-cont__2562 false-cont__2563)))) (clojure.core/fn [] (thunk__2566 input__2561 true-cont__2562 false-cont__2563)))) (thunk__2566 input__2561 true-cont__2562 false-cont__2563))) (thunk__2566 input__2561 true-cont__2562 false-cont__2563)))))))) (def one-or-more (quote (clojure.core/letfn [] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__2574 true-cont__2575 false-cont__2576] (if (or (instance? clojure.lang.Seqable input__2574) (nil? input__2574)) (clojure.core/let [left__2578 (clojure.core/seq input__2574)] (if (clojure.core/not= nil left__2578) (clojure.core/let [left__2579 (clojure.core/first left__2578)] ((.match-fn elem) left__2579 (clojure.core/fn [output__2580 rest__2581] (clojure.core/let [x output__2580] (if (clojure.core/= nil rest__2581) (clojure.core/let [left__2582 (clojure.core/next left__2578)] ((.match-fn (zero-or-more elem)) left__2582 (clojure.core/fn [output__2583 rest__2584] (clojure.core/let [xs output__2583] (clojure.core/let [rest rest__2584] (clojure.core/let [output__2577 (cons x xs)] (.invoke true-cont__2575 output__2577 rest))))) (clojure.core/fn [] (.invoke false-cont__2576)))) (.invoke false-cont__2576)))) (clojure.core/fn [] (.invoke false-cont__2576)))) (.invoke false-cont__2576))) (.invoke false-cont__2576)))))))) (def key&pattern (quote (clojure.core/letfn [] (strucjure/->Match (clojure.core/fn [input__2585 true-cont__2586 false-cont__2587] (if (or (instance? clojure.lang.Seqable input__2585) (nil? input__2585)) (clojure.core/let [left__2589 (clojure.core/seq input__2585)] (if (clojure.core/not= nil left__2589) (clojure.core/let [left__2590 (clojure.core/first left__2589)] (clojure.core/let [key left__2590] (clojure.core/let [left__2591 (clojure.core/next left__2589)] (if (clojure.core/not= nil left__2591) (clojure.core/let [left__2592 (clojure.core/first left__2591)] ((.match-fn pattern) left__2592 (clojure.core/fn [output__2593 rest__2594] (clojure.core/let [pattern output__2593] (if (clojure.core/= nil rest__2594) (clojure.core/let [left__2595 (clojure.core/next left__2591)] (if (clojure.core/= nil left__2595) (clojure.core/let [output__2588 [key pattern]] (.invoke true-cont__2586 output__2588 nil)) (.invoke false-cont__2587))) (.invoke false-cont__2587)))) (clojure.core/fn [] (.invoke false-cont__2587)))) (.invoke false-cont__2587))))) (.invoke false-cont__2587))) (.invoke false-cont__2587))))))) (def pattern (quote (clojure.core/letfn [(thunk__2607 [input__2596 true-cont__2597 false-cont__2598] (if (seq? input__2596) (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2600 (clojure.core/seq input__2596)] (if (clojure.core/not= nil left__2600) (clojure.core/let [left__2601 (clojure.core/first left__2600)] (clojure.core/let [match left__2601] (clojure.core/let [left__2602 (clojure.core/next left__2600)] (if (clojure.core/not= nil left__2602) (clojure.core/let [left__2603 (clojure.core/first left__2602)] ((.match-fn pattern) left__2603 (clojure.core/fn [output__2604 rest__2605] (clojure.core/let [pattern output__2604] (if (clojure.core/= nil rest__2605) (clojure.core/let [left__2606 (clojure.core/next left__2602)] (if (clojure.core/= nil left__2606) (clojure.core/let [output__2599 (import-ast match pattern)] (.invoke true-cont__2597 output__2599 nil)) (.invoke false-cont__2598))) (.invoke false-cont__2598)))) (clojure.core/fn [] (.invoke false-cont__2598)))) (.invoke false-cont__2598))))) (.invoke false-cont__2598))) (.invoke false-cont__2598)) (.invoke false-cont__2598))) (thunk__2608 [input__2596 true-cont__2597 false-cont__2598] (if (symbol? input__2596) (clojure.core/let [variable input__2596] (clojure.core/let [output__2599 (literal-ast variable)] (.invoke true-cont__2597 output__2599 nil))) (thunk__2607 input__2596 true-cont__2597 false-cont__2598))) (thunk__2614 [input__2596 true-cont__2597 false-cont__2598] (if (seq? input__2596) (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2609 (clojure.core/seq input__2596)] (if (clojure.core/not= nil left__2609) (clojure.core/let [left__2610 (clojure.core/first left__2609)] (if (clojure.core/= (quote or) left__2610) (clojure.core/let [left__2611 (clojure.core/next left__2609)] ((.match-fn (one-or-more pattern)) left__2611 (clojure.core/fn [output__2612 rest__2613] (clojure.core/let [patterns output__2612] (if (clojure.core/= nil rest__2613) (clojure.core/let [output__2599 (apply or-ast patterns)] (.invoke true-cont__2597 output__2599 nil)) (thunk__2608 input__2596 true-cont__2597 false-cont__2598)))) (clojure.core/fn [] (thunk__2608 input__2596 true-cont__2597 false-cont__2598)))) (thunk__2608 input__2596 true-cont__2597 false-cont__2598))) (thunk__2608 input__2596 true-cont__2597 false-cont__2598))) (thunk__2608 input__2596 true-cont__2597 false-cont__2598)) (thunk__2608 input__2596 true-cont__2597 false-cont__2598))) (thunk__2620 [input__2596 true-cont__2597 false-cont__2598] (if (seq? input__2596) (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2615 (clojure.core/seq input__2596)] (if (clojure.core/not= nil left__2615) (clojure.core/let [left__2616 (clojure.core/first left__2615)] (if (clojure.core/= (quote seq) left__2616) (clojure.core/let [left__2617 (clojure.core/next left__2615)] ((.match-fn (one-or-more pattern)) left__2617 (clojure.core/fn [output__2618 rest__2619] (clojure.core/let [patterns output__2618] (if (clojure.core/= nil rest__2619) (clojure.core/let [output__2599 (apply seq-ast patterns)] (.invoke true-cont__2597 output__2599 nil)) (thunk__2614 input__2596 true-cont__2597 false-cont__2598)))) (clojure.core/fn [] (thunk__2614 input__2596 true-cont__2597 false-cont__2598)))) (thunk__2614 input__2596 true-cont__2597 false-cont__2598))) (thunk__2614 input__2596 true-cont__2597 false-cont__2598))) (thunk__2614 input__2596 true-cont__2597 false-cont__2598)) (thunk__2614 input__2596 true-cont__2597 false-cont__2598))) (thunk__2626 [input__2596 true-cont__2597 false-cont__2598] (if (seq? input__2596) (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2621 (clojure.core/seq input__2596)] (if (clojure.core/not= nil left__2621) (clojure.core/let [left__2622 (clojure.core/first left__2621)] (if (clojure.core/= (quote and) left__2622) (clojure.core/let [left__2623 (clojure.core/next left__2621)] ((.match-fn (one-or-more pattern)) left__2623 (clojure.core/fn [output__2624 rest__2625] (clojure.core/let [patterns output__2624] (if (clojure.core/= nil rest__2625) (clojure.core/let [output__2599 (apply and-ast patterns)] (.invoke true-cont__2597 output__2599 nil)) (thunk__2620 input__2596 true-cont__2597 false-cont__2598)))) (clojure.core/fn [] (thunk__2620 input__2596 true-cont__2597 false-cont__2598)))) (thunk__2620 input__2596 true-cont__2597 false-cont__2598))) (thunk__2620 input__2596 true-cont__2597 false-cont__2598))) (thunk__2620 input__2596 true-cont__2597 false-cont__2598)) (thunk__2620 input__2596 true-cont__2597 false-cont__2598))) (thunk__2632 [input__2596 true-cont__2597 false-cont__2598] (if (seq? input__2596) (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2627 (clojure.core/seq input__2596)] (if (clojure.core/not= nil left__2627) (clojure.core/let [left__2628 (clojure.core/first left__2627)] (if (clojure.core/= (quote leave) left__2628) (clojure.core/let [left__2629 (clojure.core/next left__2627)] (if (clojure.core/not= nil left__2629) (clojure.core/let [left__2630 (clojure.core/first left__2629)] (clojure.core/let [form left__2630] (clojure.core/let [left__2631 (clojure.core/next left__2629)] (if (clojure.core/= nil left__2631) (clojure.core/let [output__2599 (->Leave form)] (.invoke true-cont__2597 output__2599 nil)) (thunk__2626 input__2596 true-cont__2597 false-cont__2598))))) (thunk__2626 input__2596 true-cont__2597 false-cont__2598))) (thunk__2626 input__2596 true-cont__2597 false-cont__2598))) (thunk__2626 input__2596 true-cont__2597 false-cont__2598))) (thunk__2626 input__2596 true-cont__2597 false-cont__2598)) (thunk__2626 input__2596 true-cont__2597 false-cont__2598))) (thunk__2638 [input__2596 true-cont__2597 false-cont__2598] (if (seq? input__2596) (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2633 (clojure.core/seq input__2596)] (if (clojure.core/not= nil left__2633) (clojure.core/let [left__2634 (clojure.core/first left__2633)] (if (clojure.core/= (quote guard) left__2634) (clojure.core/let [left__2635 (clojure.core/next left__2633)] (if (clojure.core/not= nil left__2635) (clojure.core/let [left__2636 (clojure.core/first left__2635)] (clojure.core/let [form left__2636] (clojure.core/let [left__2637 (clojure.core/next left__2635)] (if (clojure.core/= nil left__2637) (clojure.core/let [output__2599 (->Guard form)] (.invoke true-cont__2597 output__2599 nil)) (thunk__2632 input__2596 true-cont__2597 false-cont__2598))))) (thunk__2632 input__2596 true-cont__2597 false-cont__2598))) (thunk__2632 input__2596 true-cont__2597 false-cont__2598))) (thunk__2632 input__2596 true-cont__2597 false-cont__2598))) (thunk__2632 input__2596 true-cont__2597 false-cont__2598)) (thunk__2632 input__2596 true-cont__2597 false-cont__2598))) (thunk__2644 [input__2596 true-cont__2597 false-cont__2598] (if (seq? input__2596) (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2639 (clojure.core/seq input__2596)] (if (clojure.core/not= nil left__2639) (clojure.core/let [left__2640 (clojure.core/first left__2639)] (if (clojure.core/= (quote quote) left__2640) (clojure.core/let [left__2641 (clojure.core/next left__2639)] (if (clojure.core/not= nil left__2641) (clojure.core/let [left__2642 (clojure.core/first left__2641)] (clojure.core/let [quoted left__2642] (clojure.core/let [left__2643 (clojure.core/next left__2641)] (if (clojure.core/= nil left__2643) (clojure.core/let [output__2599 (literal-ast (clojure.core/seq (clojure.core/concat (clojure.core/list (quote quote)) (clojure.core/list quoted))))] (.invoke true-cont__2597 output__2599 nil)) (thunk__2638 input__2596 true-cont__2597 false-cont__2598))))) (thunk__2638 input__2596 true-cont__2597 false-cont__2598))) (thunk__2638 input__2596 true-cont__2597 false-cont__2598))) (thunk__2638 input__2596 true-cont__2597 false-cont__2598))) (thunk__2638 input__2596 true-cont__2597 false-cont__2598)) (thunk__2638 input__2596 true-cont__2597 false-cont__2598))) (thunk__2648 [input__2596 true-cont__2597 false-cont__2598] (if (vector? input__2596) (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2645 (clojure.core/seq input__2596)] ((.match-fn (zero-or-more seq-pattern)) left__2645 (clojure.core/fn [output__2646 rest__2647] (clojure.core/let [seq-patterns output__2646] (if (clojure.core/= nil rest__2647) (clojure.core/let [output__2599 (seqable-ast seq-patterns)] (.invoke true-cont__2597 output__2599 nil)) (thunk__2644 input__2596 true-cont__2597 false-cont__2598)))) (clojure.core/fn [] (thunk__2644 input__2596 true-cont__2597 false-cont__2598)))) (thunk__2644 input__2596 true-cont__2597 false-cont__2598)) (thunk__2644 input__2596 true-cont__2597 false-cont__2598))) (thunk__2649 [input__2596 true-cont__2597 false-cont__2598] (if (clojure.core/instance? java.util.regex.Pattern input__2596) (clojure.core/let [regex input__2596] (clojure.core/let [output__2599 (regex-ast regex)] (.invoke true-cont__2597 output__2599 nil))) (thunk__2648 input__2596 true-cont__2597 false-cont__2598))) (thunk__2654 [input__2596 true-cont__2597 false-cont__2598] (if (or (instance? clojure.lang.Seqable input__2596) (nil? input__2596)) (clojure.core/let [left__2651 (clojure.core/seq input__2596)] ((.match-fn (zero-or-more key&pattern)) left__2651 (clojure.core/fn [output__2652 rest__2653] (clojure.core/let [keys&patterns output__2652] (if (clojure.core/= nil rest__2653) (clojure.core/let [output__2599 (map-ast keys&patterns)] (.invoke true-cont__2597 output__2599 nil)) (thunk__2649 input__2596 true-cont__2597 false-cont__2598)))) (clojure.core/fn [] (thunk__2649 input__2596 true-cont__2597 false-cont__2598)))) (thunk__2649 input__2596 true-cont__2597 false-cont__2598))) (thunk__2655 [input__2596 true-cont__2597 false-cont__2598] (if (clojure.core/instance? clojure.lang.PersistentHashMap input__2596) (thunk__2654 input__2596 true-cont__2597 false-cont__2598) (thunk__2649 input__2596 true-cont__2597 false-cont__2598))) (thunk__2656 [input__2596 true-cont__2597 false-cont__2598] (if (clojure.core/instance? clojure.lang.PersistentArrayMap input__2596) (thunk__2654 input__2596 true-cont__2597 false-cont__2598) (thunk__2655 input__2596 true-cont__2597 false-cont__2598))) (thunk__2657 [input__2596 true-cont__2597 false-cont__2598] (if (class-name? input__2596) (clojure.core/let [class-name input__2596] (clojure.core/let [output__2599 (class-ast class-name)] (.invoke true-cont__2597 output__2599 nil))) (thunk__2656 input__2596 true-cont__2597 false-cont__2598))) (thunk__2658 [input__2596 true-cont__2597 false-cont__2598] (if (primitive? input__2596) (clojure.core/let [literal input__2596] (clojure.core/let [output__2599 (literal-ast literal)] (.invoke true-cont__2597 output__2599 nil))) (thunk__2657 input__2596 true-cont__2597 false-cont__2598))) (thunk__2659 [input__2596 true-cont__2597 false-cont__2598] (if (binding? input__2596) (clojure.core/let [binding input__2596] (clojure.core/let [output__2599 (->Bind (binding-name binding))] (.invoke true-cont__2597 output__2599 nil))) (thunk__2658 input__2596 true-cont__2597 false-cont__2598)))] (strucjure/->Match (clojure.core/fn [input__2596 true-cont__2597 false-cont__2598] (if (clojure.core/= (quote _) input__2596) (clojure.core/let [output__2599 (->Leave nil)] (.invoke true-cont__2597 output__2599 nil)) (thunk__2659 input__2596 true-cont__2597 false-cont__2598))))))) (def seq-pattern (quote (clojure.core/letfn [(thunk__2666 [input__2660 true-cont__2661 false-cont__2662] ((.match-fn pattern) input__2660 (clojure.core/fn [output__2664 rest__2665] (clojure.core/let [pattern output__2664] (clojure.core/let [output__2663 (head-ast pattern)] (.invoke true-cont__2661 output__2663 rest__2665)))) (clojure.core/fn [] (.invoke false-cont__2662)))) (thunk__2672 [input__2660 true-cont__2661 false-cont__2662] (if (seq? input__2660) (if (or (instance? clojure.lang.Seqable input__2660) (nil? input__2660)) (clojure.core/let [left__2667 (clojure.core/seq input__2660)] (if (clojure.core/not= nil left__2667) (clojure.core/let [left__2668 (clojure.core/first left__2667)] (if (clojure.core/= (quote guard) left__2668) (clojure.core/let [left__2669 (clojure.core/next left__2667)] (if (clojure.core/not= nil left__2669) (clojure.core/let [left__2670 (clojure.core/first left__2669)] (clojure.core/let [form left__2670] (clojure.core/let [left__2671 (clojure.core/next left__2669)] (if (clojure.core/= nil left__2671) (clojure.core/let [output__2663 (->Guard form)] (.invoke true-cont__2661 output__2663 nil)) (thunk__2666 input__2660 true-cont__2661 false-cont__2662))))) (thunk__2666 input__2660 true-cont__2661 false-cont__2662))) (thunk__2666 input__2660 true-cont__2661 false-cont__2662))) (thunk__2666 input__2660 true-cont__2661 false-cont__2662))) (thunk__2666 input__2660 true-cont__2661 false-cont__2662)) (thunk__2666 input__2660 true-cont__2661 false-cont__2662)))] (strucjure/->Match (clojure.core/fn [input__2660 true-cont__2661 false-cont__2662] (if (seq? input__2660) (if (or (instance? clojure.lang.Seqable input__2660) (nil? input__2660)) (clojure.core/let [left__2673 (clojure.core/seq input__2660)] (if (clojure.core/not= nil left__2673) (clojure.core/let [left__2674 (clojure.core/first left__2673)] (if (clojure.core/= (quote &) left__2674) (clojure.core/let [left__2675 (clojure.core/next left__2673)] (if (clojure.core/not= nil left__2675) (clojure.core/let [left__2676 (clojure.core/first left__2675)] ((.match-fn pattern) left__2676 (clojure.core/fn [output__2677 rest__2678] (clojure.core/let [pattern output__2677] (if (clojure.core/= nil rest__2678) (clojure.core/let [left__2679 (clojure.core/next left__2675)] (if (clojure.core/= nil left__2679) (clojure.core/let [output__2663 pattern] (.invoke true-cont__2661 output__2663 nil)) (thunk__2672 input__2660 true-cont__2661 false-cont__2662))) (thunk__2672 input__2660 true-cont__2661 false-cont__2662)))) (clojure.core/fn [] (thunk__2672 input__2660 true-cont__2661 false-cont__2662)))) (thunk__2672 input__2660 true-cont__2661 false-cont__2662))) (thunk__2672 input__2660 true-cont__2661 false-cont__2662))) (thunk__2672 input__2660 true-cont__2661 false-cont__2662))) (thunk__2672 input__2660 true-cont__2661 false-cont__2662)) (thunk__2672 input__2660 true-cont__2661 false-cont__2662)))))))
