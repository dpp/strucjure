(ns strucjure.bootstrap) (do (def optional (quote (clojure.core/letfn [(thunk__14642 [input__14637 true-cont__14638 false-cont__14639] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14637) (clojure.core/nil? input__14637)) (clojure.core/let [left__14641 (clojure.core/seq input__14637)] (clojure.core/let [rest left__14641] (clojure.core/let [output__14640 nil] (.invoke true-cont__14638 output__14640 rest)))) (.invoke false-cont__14639)))] (clojure.core/fn [elem] (strucjure/->View (clojure.core/fn [input__14637 true-cont__14638 false-cont__14639] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14637) (clojure.core/nil? input__14637)) (clojure.core/let [left__14643 (clojure.core/seq input__14637)] (if (clojure.core/not= nil left__14643) (clojure.core/let [left__14644 (clojure.core/first left__14643)] ((.view-fn elem) left__14644 (clojure.core/fn [output__14645 rest__14646] (clojure.core/let [x output__14645] (if (clojure.core/= nil rest__14646) (clojure.core/let [left__14647 (clojure.core/next left__14643)] (clojure.core/let [rest left__14647] (clojure.core/let [output__14640 x] (.invoke true-cont__14638 output__14640 rest)))) (thunk__14642 input__14637 true-cont__14638 false-cont__14639)))) (clojure.core/fn [] (thunk__14642 input__14637 true-cont__14638 false-cont__14639)))) (thunk__14642 input__14637 true-cont__14638 false-cont__14639))) (thunk__14642 input__14637 true-cont__14638 false-cont__14639)))))))) (def zero-or-more (quote (clojure.core/letfn [(thunk__14653 [input__14648 true-cont__14649 false-cont__14650] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14648) (clojure.core/nil? input__14648)) (clojure.core/let [left__14652 (clojure.core/seq input__14648)] (clojure.core/let [rest left__14652] (clojure.core/let [output__14651 nil] (.invoke true-cont__14649 output__14651 rest)))) (.invoke false-cont__14650)))] (clojure.core/fn [elem] (strucjure/->View (clojure.core/fn [input__14648 true-cont__14649 false-cont__14650] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14648) (clojure.core/nil? input__14648)) (clojure.core/let [left__14654 (clojure.core/seq input__14648)] (if (clojure.core/not= nil left__14654) (clojure.core/let [left__14655 (clojure.core/first left__14654)] ((.view-fn elem) left__14655 (clojure.core/fn [output__14656 rest__14657] (clojure.core/let [x output__14656] (if (clojure.core/= nil rest__14657) (clojure.core/let [left__14658 (clojure.core/next left__14654)] ((.view-fn (zero-or-more elem)) left__14658 (clojure.core/fn [output__14659 rest__14660] (clojure.core/let [xs output__14659] (clojure.core/let [rest rest__14660] (clojure.core/let [output__14651 (cons x xs)] (.invoke true-cont__14649 output__14651 rest))))) (clojure.core/fn [] (thunk__14653 input__14648 true-cont__14649 false-cont__14650)))) (thunk__14653 input__14648 true-cont__14649 false-cont__14650)))) (clojure.core/fn [] (thunk__14653 input__14648 true-cont__14649 false-cont__14650)))) (thunk__14653 input__14648 true-cont__14649 false-cont__14650))) (thunk__14653 input__14648 true-cont__14649 false-cont__14650)))))))) (def one-or-more (quote (clojure.core/letfn [] (clojure.core/fn [elem] (strucjure/->View (clojure.core/fn [input__14661 true-cont__14662 false-cont__14663] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14661) (clojure.core/nil? input__14661)) (clojure.core/let [left__14665 (clojure.core/seq input__14661)] (if (clojure.core/not= nil left__14665) (clojure.core/let [left__14666 (clojure.core/first left__14665)] ((.view-fn elem) left__14666 (clojure.core/fn [output__14667 rest__14668] (clojure.core/let [x output__14667] (if (clojure.core/= nil rest__14668) (clojure.core/let [left__14669 (clojure.core/next left__14665)] ((.view-fn (zero-or-more elem)) left__14669 (clojure.core/fn [output__14670 rest__14671] (clojure.core/let [xs output__14670] (clojure.core/let [rest rest__14671] (clojure.core/let [output__14664 (cons x xs)] (.invoke true-cont__14662 output__14664 rest))))) (clojure.core/fn [] (.invoke false-cont__14663)))) (.invoke false-cont__14663)))) (clojure.core/fn [] (.invoke false-cont__14663)))) (.invoke false-cont__14663))) (.invoke false-cont__14663)))))))) (def key&pattern (quote (clojure.core/letfn [] (strucjure/->View (clojure.core/fn [input__14672 true-cont__14673 false-cont__14674] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14672) (clojure.core/nil? input__14672)) (clojure.core/let [left__14676 (clojure.core/seq input__14672)] (if (clojure.core/not= nil left__14676) (clojure.core/let [left__14677 (clojure.core/first left__14676)] (clojure.core/let [key left__14677] (clojure.core/let [left__14678 (clojure.core/next left__14676)] (if (clojure.core/not= nil left__14678) (clojure.core/let [left__14679 (clojure.core/first left__14678)] ((.view-fn pattern) left__14679 (clojure.core/fn [output__14680 rest__14681] (clojure.core/let [pattern output__14680] (if (clojure.core/= nil rest__14681) (clojure.core/let [left__14682 (clojure.core/next left__14678)] (if (clojure.core/= nil left__14682) (clojure.core/let [output__14675 [key pattern]] (.invoke true-cont__14673 output__14675 nil)) (.invoke false-cont__14674))) (.invoke false-cont__14674)))) (clojure.core/fn [] (.invoke false-cont__14674)))) (.invoke false-cont__14674))))) (.invoke false-cont__14674))) (.invoke false-cont__14674))))))) (def pattern (quote (clojure.core/letfn [(thunk__14694 [input__14683 true-cont__14684 false-cont__14685] (if (seq? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14687 (clojure.core/seq input__14683)] (if (clojure.core/not= nil left__14687) (clojure.core/let [left__14688 (clojure.core/first left__14687)] (clojure.core/let [view left__14688] (clojure.core/let [left__14689 (clojure.core/next left__14687)] (if (clojure.core/not= nil left__14689) (clojure.core/let [left__14690 (clojure.core/first left__14689)] ((.view-fn pattern) left__14690 (clojure.core/fn [output__14691 rest__14692] (clojure.core/let [pattern output__14691] (if (clojure.core/= nil rest__14692) (clojure.core/let [left__14693 (clojure.core/next left__14689)] (if (clojure.core/= nil left__14693) (clojure.core/let [output__14686 (import-ast view pattern)] (.invoke true-cont__14684 output__14686 nil)) (.invoke false-cont__14685))) (.invoke false-cont__14685)))) (clojure.core/fn [] (.invoke false-cont__14685)))) (.invoke false-cont__14685))))) (.invoke false-cont__14685))) (.invoke false-cont__14685)) (.invoke false-cont__14685))) (thunk__14695 [input__14683 true-cont__14684 false-cont__14685] (if (symbol? input__14683) (clojure.core/let [variable input__14683] (clojure.core/let [output__14686 (literal-ast variable)] (.invoke true-cont__14684 output__14686 nil))) (thunk__14694 input__14683 true-cont__14684 false-cont__14685))) (thunk__14701 [input__14683 true-cont__14684 false-cont__14685] (if (seq? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14696 (clojure.core/seq input__14683)] (if (clojure.core/not= nil left__14696) (clojure.core/let [left__14697 (clojure.core/first left__14696)] (if (clojure.core/= (quote or) left__14697) (clojure.core/let [left__14698 (clojure.core/next left__14696)] ((.view-fn (one-or-more pattern)) left__14698 (clojure.core/fn [output__14699 rest__14700] (clojure.core/let [patterns output__14699] (if (clojure.core/= nil rest__14700) (clojure.core/let [output__14686 (apply or-ast patterns)] (.invoke true-cont__14684 output__14686 nil)) (thunk__14695 input__14683 true-cont__14684 false-cont__14685)))) (clojure.core/fn [] (thunk__14695 input__14683 true-cont__14684 false-cont__14685)))) (thunk__14695 input__14683 true-cont__14684 false-cont__14685))) (thunk__14695 input__14683 true-cont__14684 false-cont__14685))) (thunk__14695 input__14683 true-cont__14684 false-cont__14685)) (thunk__14695 input__14683 true-cont__14684 false-cont__14685))) (thunk__14707 [input__14683 true-cont__14684 false-cont__14685] (if (seq? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14702 (clojure.core/seq input__14683)] (if (clojure.core/not= nil left__14702) (clojure.core/let [left__14703 (clojure.core/first left__14702)] (if (clojure.core/= (quote seq) left__14703) (clojure.core/let [left__14704 (clojure.core/next left__14702)] ((.view-fn (one-or-more pattern)) left__14704 (clojure.core/fn [output__14705 rest__14706] (clojure.core/let [patterns output__14705] (if (clojure.core/= nil rest__14706) (clojure.core/let [output__14686 (apply seq-ast patterns)] (.invoke true-cont__14684 output__14686 nil)) (thunk__14701 input__14683 true-cont__14684 false-cont__14685)))) (clojure.core/fn [] (thunk__14701 input__14683 true-cont__14684 false-cont__14685)))) (thunk__14701 input__14683 true-cont__14684 false-cont__14685))) (thunk__14701 input__14683 true-cont__14684 false-cont__14685))) (thunk__14701 input__14683 true-cont__14684 false-cont__14685)) (thunk__14701 input__14683 true-cont__14684 false-cont__14685))) (thunk__14713 [input__14683 true-cont__14684 false-cont__14685] (if (seq? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14708 (clojure.core/seq input__14683)] (if (clojure.core/not= nil left__14708) (clojure.core/let [left__14709 (clojure.core/first left__14708)] (if (clojure.core/= (quote and) left__14709) (clojure.core/let [left__14710 (clojure.core/next left__14708)] ((.view-fn (one-or-more pattern)) left__14710 (clojure.core/fn [output__14711 rest__14712] (clojure.core/let [patterns output__14711] (if (clojure.core/= nil rest__14712) (clojure.core/let [output__14686 (apply and-ast patterns)] (.invoke true-cont__14684 output__14686 nil)) (thunk__14707 input__14683 true-cont__14684 false-cont__14685)))) (clojure.core/fn [] (thunk__14707 input__14683 true-cont__14684 false-cont__14685)))) (thunk__14707 input__14683 true-cont__14684 false-cont__14685))) (thunk__14707 input__14683 true-cont__14684 false-cont__14685))) (thunk__14707 input__14683 true-cont__14684 false-cont__14685)) (thunk__14707 input__14683 true-cont__14684 false-cont__14685))) (thunk__14719 [input__14683 true-cont__14684 false-cont__14685] (if (seq? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14714 (clojure.core/seq input__14683)] (if (clojure.core/not= nil left__14714) (clojure.core/let [left__14715 (clojure.core/first left__14714)] (if (clojure.core/= (quote leave) left__14715) (clojure.core/let [left__14716 (clojure.core/next left__14714)] (if (clojure.core/not= nil left__14716) (clojure.core/let [left__14717 (clojure.core/first left__14716)] (clojure.core/let [form left__14717] (clojure.core/let [left__14718 (clojure.core/next left__14716)] (if (clojure.core/= nil left__14718) (clojure.core/let [output__14686 (->Leave form)] (.invoke true-cont__14684 output__14686 nil)) (thunk__14713 input__14683 true-cont__14684 false-cont__14685))))) (thunk__14713 input__14683 true-cont__14684 false-cont__14685))) (thunk__14713 input__14683 true-cont__14684 false-cont__14685))) (thunk__14713 input__14683 true-cont__14684 false-cont__14685))) (thunk__14713 input__14683 true-cont__14684 false-cont__14685)) (thunk__14713 input__14683 true-cont__14684 false-cont__14685))) (thunk__14725 [input__14683 true-cont__14684 false-cont__14685] (if (seq? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14720 (clojure.core/seq input__14683)] (if (clojure.core/not= nil left__14720) (clojure.core/let [left__14721 (clojure.core/first left__14720)] (if (clojure.core/= (quote guard) left__14721) (clojure.core/let [left__14722 (clojure.core/next left__14720)] (if (clojure.core/not= nil left__14722) (clojure.core/let [left__14723 (clojure.core/first left__14722)] (clojure.core/let [form left__14723] (clojure.core/let [left__14724 (clojure.core/next left__14722)] (if (clojure.core/= nil left__14724) (clojure.core/let [output__14686 (->Guard form)] (.invoke true-cont__14684 output__14686 nil)) (thunk__14719 input__14683 true-cont__14684 false-cont__14685))))) (thunk__14719 input__14683 true-cont__14684 false-cont__14685))) (thunk__14719 input__14683 true-cont__14684 false-cont__14685))) (thunk__14719 input__14683 true-cont__14684 false-cont__14685))) (thunk__14719 input__14683 true-cont__14684 false-cont__14685)) (thunk__14719 input__14683 true-cont__14684 false-cont__14685))) (thunk__14731 [input__14683 true-cont__14684 false-cont__14685] (if (seq? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14726 (clojure.core/seq input__14683)] (if (clojure.core/not= nil left__14726) (clojure.core/let [left__14727 (clojure.core/first left__14726)] (if (clojure.core/= (quote quote) left__14727) (clojure.core/let [left__14728 (clojure.core/next left__14726)] (if (clojure.core/not= nil left__14728) (clojure.core/let [left__14729 (clojure.core/first left__14728)] (clojure.core/let [quoted left__14729] (clojure.core/let [left__14730 (clojure.core/next left__14728)] (if (clojure.core/= nil left__14730) (clojure.core/let [output__14686 (literal-ast (clojure.core/seq (clojure.core/concat (clojure.core/list (quote quote)) (clojure.core/list quoted))))] (.invoke true-cont__14684 output__14686 nil)) (thunk__14725 input__14683 true-cont__14684 false-cont__14685))))) (thunk__14725 input__14683 true-cont__14684 false-cont__14685))) (thunk__14725 input__14683 true-cont__14684 false-cont__14685))) (thunk__14725 input__14683 true-cont__14684 false-cont__14685))) (thunk__14725 input__14683 true-cont__14684 false-cont__14685)) (thunk__14725 input__14683 true-cont__14684 false-cont__14685))) (thunk__14735 [input__14683 true-cont__14684 false-cont__14685] (if (vector? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14732 (clojure.core/seq input__14683)] ((.view-fn (zero-or-more seq-pattern)) left__14732 (clojure.core/fn [output__14733 rest__14734] (clojure.core/let [seq-patterns output__14733] (if (clojure.core/= nil rest__14734) (clojure.core/let [output__14686 (seqable-ast seq-patterns)] (.invoke true-cont__14684 output__14686 nil)) (thunk__14731 input__14683 true-cont__14684 false-cont__14685)))) (clojure.core/fn [] (thunk__14731 input__14683 true-cont__14684 false-cont__14685)))) (thunk__14731 input__14683 true-cont__14684 false-cont__14685)) (thunk__14731 input__14683 true-cont__14684 false-cont__14685))) (thunk__14745 [input__14683 true-cont__14684 false-cont__14685 input__14683 left__14736 left__14736 left__14736 true-case-input__14738] (if (clojure.core/= nil true-case-input__14738) (clojure.core/let [left__14739 (clojure.core/next left__14736)] (if (clojure.core/not= nil left__14739) (clojure.core/let [left__14740 (clojure.core/first left__14739)] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable left__14740) (clojure.core/nil? left__14740)) (clojure.core/let [left__14741 (clojure.core/seq left__14740)] (if (clojure.core/not= nil left__14741) (clojure.core/let [left__14742 (clojure.core/first left__14741)] (clojure.core/let [arg left__14742] (clojure.core/let [left__14743 (clojure.core/next left__14741)] (if (clojure.core/= nil left__14743) (clojure.core/let [left__14744 (clojure.core/next left__14739)] (clojure.core/let [body left__14744] (clojure.core/let [output__14686 (predicate-ast (clojure.core/seq (clojure.core/concat (clojure.core/list (quote do)) (clojure.walk/prewalk-replace {arg input-sym} body))))] (.invoke true-cont__14684 output__14686 nil)))) (thunk__14735 input__14683 true-cont__14684 false-cont__14685))))) (thunk__14735 input__14683 true-cont__14684 false-cont__14685))) (thunk__14735 input__14683 true-cont__14684 false-cont__14685))) (thunk__14735 input__14683 true-cont__14684 false-cont__14685))) (thunk__14735 input__14683 true-cont__14684 false-cont__14685))) (thunk__14746 [input__14683 true-cont__14684 false-cont__14685 input__14683 left__14736 left__14736 left__14736 left__14737 left__14737] (if (clojure.core/= (quote fn*) left__14737) (thunk__14745 input__14683 true-cont__14684 false-cont__14685 input__14683 left__14736 left__14736 left__14736 nil) (thunk__14735 input__14683 true-cont__14684 false-cont__14685))) (thunk__14747 [input__14683 true-cont__14684 false-cont__14685] (if (seq? input__14683) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14736 (clojure.core/seq input__14683)] (if (clojure.core/not= nil left__14736) (clojure.core/let [left__14737 (clojure.core/first left__14736)] (if (clojure.core/= (quote fn) left__14737) (thunk__14745 input__14683 true-cont__14684 false-cont__14685 input__14683 left__14736 left__14736 left__14736 nil) (thunk__14746 input__14683 true-cont__14684 false-cont__14685 input__14683 left__14736 left__14736 left__14736 left__14737 left__14737))) (thunk__14735 input__14683 true-cont__14684 false-cont__14685))) (thunk__14735 input__14683 true-cont__14684 false-cont__14685)) (thunk__14735 input__14683 true-cont__14684 false-cont__14685))) (thunk__14748 [input__14683 true-cont__14684 false-cont__14685] (if (predicate? input__14683) (clojure.core/let [predicate input__14683] (clojure.core/let [output__14686 (predicate-ast (clojure.core/seq (clojure.core/concat (clojure.core/list predicate) (clojure.core/list input-sym))))] (.invoke true-cont__14684 output__14686 nil))) (thunk__14747 input__14683 true-cont__14684 false-cont__14685))) (thunk__14749 [input__14683 true-cont__14684 false-cont__14685] (if (clojure.core/instance? java.util.regex.Pattern input__14683) (clojure.core/let [regex input__14683] (clojure.core/let [output__14686 (regex-ast regex)] (.invoke true-cont__14684 output__14686 nil))) (thunk__14748 input__14683 true-cont__14684 false-cont__14685))) (thunk__14754 [input__14683 true-cont__14684 false-cont__14685] (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14683) (clojure.core/nil? input__14683)) (clojure.core/let [left__14751 (clojure.core/seq input__14683)] ((.view-fn (zero-or-more key&pattern)) left__14751 (clojure.core/fn [output__14752 rest__14753] (clojure.core/let [keys&patterns output__14752] (if (clojure.core/= nil rest__14753) (clojure.core/let [output__14686 (map-ast keys&patterns)] (.invoke true-cont__14684 output__14686 nil)) (thunk__14749 input__14683 true-cont__14684 false-cont__14685)))) (clojure.core/fn [] (thunk__14749 input__14683 true-cont__14684 false-cont__14685)))) (thunk__14749 input__14683 true-cont__14684 false-cont__14685))) (thunk__14755 [input__14683 true-cont__14684 false-cont__14685] (if (clojure.core/instance? clojure.lang.PersistentHashMap input__14683) (thunk__14754 input__14683 true-cont__14684 false-cont__14685) (thunk__14749 input__14683 true-cont__14684 false-cont__14685))) (thunk__14756 [input__14683 true-cont__14684 false-cont__14685] (if (clojure.core/instance? clojure.lang.PersistentArrayMap input__14683) (thunk__14754 input__14683 true-cont__14684 false-cont__14685) (thunk__14755 input__14683 true-cont__14684 false-cont__14685))) (thunk__14757 [input__14683 true-cont__14684 false-cont__14685] (if (class-name? input__14683) (clojure.core/let [class-name input__14683] (clojure.core/let [output__14686 (class-ast class-name)] (.invoke true-cont__14684 output__14686 nil))) (thunk__14756 input__14683 true-cont__14684 false-cont__14685))) (thunk__14758 [input__14683 true-cont__14684 false-cont__14685] (if (primitive? input__14683) (clojure.core/let [literal input__14683] (clojure.core/let [output__14686 (literal-ast literal)] (.invoke true-cont__14684 output__14686 nil))) (thunk__14757 input__14683 true-cont__14684 false-cont__14685))) (thunk__14759 [input__14683 true-cont__14684 false-cont__14685] (if (binding? input__14683) (clojure.core/let [binding input__14683] (clojure.core/let [output__14686 (->Bind (binding-name binding))] (.invoke true-cont__14684 output__14686 nil))) (thunk__14758 input__14683 true-cont__14684 false-cont__14685)))] (strucjure/->View (clojure.core/fn [input__14683 true-cont__14684 false-cont__14685] (if (clojure.core/= (quote _) input__14683) (clojure.core/let [output__14686 (->Leave nil)] (.invoke true-cont__14684 output__14686 nil)) (thunk__14759 input__14683 true-cont__14684 false-cont__14685))))))) (def seq-pattern (quote (clojure.core/letfn [(thunk__14766 [input__14760 true-cont__14761 false-cont__14762] ((.view-fn pattern) input__14760 (clojure.core/fn [output__14764 rest__14765] (clojure.core/let [pattern output__14764] (clojure.core/let [output__14763 (head-ast pattern)] (.invoke true-cont__14761 output__14763 rest__14765)))) (clojure.core/fn [] (.invoke false-cont__14762)))) (thunk__14772 [input__14760 true-cont__14761 false-cont__14762] (if (seq? input__14760) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14760) (clojure.core/nil? input__14760)) (clojure.core/let [left__14767 (clojure.core/seq input__14760)] (if (clojure.core/not= nil left__14767) (clojure.core/let [left__14768 (clojure.core/first left__14767)] (if (clojure.core/= (quote guard) left__14768) (clojure.core/let [left__14769 (clojure.core/next left__14767)] (if (clojure.core/not= nil left__14769) (clojure.core/let [left__14770 (clojure.core/first left__14769)] (clojure.core/let [form left__14770] (clojure.core/let [left__14771 (clojure.core/next left__14769)] (if (clojure.core/= nil left__14771) (clojure.core/let [output__14763 (->Guard form)] (.invoke true-cont__14761 output__14763 nil)) (thunk__14766 input__14760 true-cont__14761 false-cont__14762))))) (thunk__14766 input__14760 true-cont__14761 false-cont__14762))) (thunk__14766 input__14760 true-cont__14761 false-cont__14762))) (thunk__14766 input__14760 true-cont__14761 false-cont__14762))) (thunk__14766 input__14760 true-cont__14761 false-cont__14762)) (thunk__14766 input__14760 true-cont__14761 false-cont__14762)))] (strucjure/->View (clojure.core/fn [input__14760 true-cont__14761 false-cont__14762] (if (seq? input__14760) (if (clojure.core/or (clojure.core/instance? clojure.lang.Seqable input__14760) (clojure.core/nil? input__14760)) (clojure.core/let [left__14773 (clojure.core/seq input__14760)] (if (clojure.core/not= nil left__14773) (clojure.core/let [left__14774 (clojure.core/first left__14773)] (if (clojure.core/= (quote &) left__14774) (clojure.core/let [left__14775 (clojure.core/next left__14773)] (if (clojure.core/not= nil left__14775) (clojure.core/let [left__14776 (clojure.core/first left__14775)] ((.view-fn pattern) left__14776 (clojure.core/fn [output__14777 rest__14778] (clojure.core/let [pattern output__14777] (if (clojure.core/= nil rest__14778) (clojure.core/let [left__14779 (clojure.core/next left__14775)] (if (clojure.core/= nil left__14779) (clojure.core/let [output__14763 pattern] (.invoke true-cont__14761 output__14763 nil)) (thunk__14772 input__14760 true-cont__14761 false-cont__14762))) (thunk__14772 input__14760 true-cont__14761 false-cont__14762)))) (clojure.core/fn [] (thunk__14772 input__14760 true-cont__14761 false-cont__14762)))) (thunk__14772 input__14760 true-cont__14761 false-cont__14762))) (thunk__14772 input__14760 true-cont__14761 false-cont__14762))) (thunk__14772 input__14760 true-cont__14761 false-cont__14762))) (thunk__14772 input__14760 true-cont__14761 false-cont__14762)) (thunk__14772 input__14760 true-cont__14761 false-cont__14762))))))))