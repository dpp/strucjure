(ns strucjure.bootstrap)

;; Pre-compiled parsers to bootstrap strucjure's syntax
(def optional (quote (clojure.core/letfn [(thunk__8634 [input__8629 true-cont__8630 false-cont__8631] (if (or (instance? clojure.lang.Seqable input__8629) (nil? input__8629)) (clojure.core/let [left__8633 (clojure.core/seq input__8629)] (clojure.core/let [rest left__8633] (clojure.core/let [output__8632 nil] (.invoke true-cont__8630 output__8632 rest)))) (.invoke false-cont__8631)))] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__8629 true-cont__8630 false-cont__8631] (if (or (instance? clojure.lang.Seqable input__8629) (nil? input__8629)) (clojure.core/let [left__8635 (clojure.core/seq input__8629)] (if (clojure.core/not= nil left__8635) (clojure.core/let [left__8636 (clojure.core/first left__8635)] ((.match-fn elem) left__8636 (clojure.core/fn [output__8637 rest__8638] (clojure.core/let [x output__8637] (if (clojure.core/= nil rest__8638) (clojure.core/let [left__8639 (clojure.core/next left__8635)] (clojure.core/let [rest left__8639] (clojure.core/let [output__8632 x] (.invoke true-cont__8630 output__8632 rest)))) (thunk__8634 input__8629 true-cont__8630 false-cont__8631)))) (clojure.core/fn [] (thunk__8634 input__8629 true-cont__8630 false-cont__8631)))) (thunk__8634 input__8629 true-cont__8630 false-cont__8631))) (thunk__8634 input__8629 true-cont__8630 false-cont__8631)))))))) (def zero-or-more (quote (clojure.core/letfn [(thunk__8645 [input__8640 true-cont__8641 false-cont__8642] (if (or (instance? clojure.lang.Seqable input__8640) (nil? input__8640)) (clojure.core/let [left__8644 (clojure.core/seq input__8640)] (clojure.core/let [rest left__8644] (clojure.core/let [output__8643 nil] (.invoke true-cont__8641 output__8643 rest)))) (.invoke false-cont__8642)))] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__8640 true-cont__8641 false-cont__8642] (if (or (instance? clojure.lang.Seqable input__8640) (nil? input__8640)) (clojure.core/let [left__8646 (clojure.core/seq input__8640)] (if (clojure.core/not= nil left__8646) (clojure.core/let [left__8647 (clojure.core/first left__8646)] ((.match-fn elem) left__8647 (clojure.core/fn [output__8648 rest__8649] (clojure.core/let [x output__8648] (if (clojure.core/= nil rest__8649) (clojure.core/let [left__8650 (clojure.core/next left__8646)] ((.match-fn (zero-or-more elem)) left__8650 (clojure.core/fn [output__8651 rest__8652] (clojure.core/let [xs output__8651] (clojure.core/let [rest rest__8652] (clojure.core/let [output__8643 (cons x xs)] (.invoke true-cont__8641 output__8643 rest))))) (clojure.core/fn [] (thunk__8645 input__8640 true-cont__8641 false-cont__8642)))) (thunk__8645 input__8640 true-cont__8641 false-cont__8642)))) (clojure.core/fn [] (thunk__8645 input__8640 true-cont__8641 false-cont__8642)))) (thunk__8645 input__8640 true-cont__8641 false-cont__8642))) (thunk__8645 input__8640 true-cont__8641 false-cont__8642)))))))) (def one-or-more (quote (clojure.core/letfn [] (clojure.core/fn [elem] (strucjure/->Match (clojure.core/fn [input__8653 true-cont__8654 false-cont__8655] (if (or (instance? clojure.lang.Seqable input__8653) (nil? input__8653)) (clojure.core/let [left__8657 (clojure.core/seq input__8653)] (if (clojure.core/not= nil left__8657) (clojure.core/let [left__8658 (clojure.core/first left__8657)] ((.match-fn elem) left__8658 (clojure.core/fn [output__8659 rest__8660] (clojure.core/let [x output__8659] (if (clojure.core/= nil rest__8660) (clojure.core/let [left__8661 (clojure.core/next left__8657)] ((.match-fn (zero-or-more elem)) left__8661 (clojure.core/fn [output__8662 rest__8663] (clojure.core/let [xs output__8662] (clojure.core/let [rest rest__8663] (clojure.core/let [output__8656 (cons x xs)] (.invoke true-cont__8654 output__8656 rest))))) (clojure.core/fn [] (.invoke false-cont__8655)))) (.invoke false-cont__8655)))) (clojure.core/fn [] (.invoke false-cont__8655)))) (.invoke false-cont__8655))) (.invoke false-cont__8655)))))))) (def key&pattern (quote (clojure.core/letfn [] (strucjure/->Match (clojure.core/fn [input__8664 true-cont__8665 false-cont__8666] (if (or (instance? clojure.lang.Seqable input__8664) (nil? input__8664)) (clojure.core/let [left__8668 (clojure.core/seq input__8664)] (if (clojure.core/not= nil left__8668) (clojure.core/let [left__8669 (clojure.core/first left__8668)] (clojure.core/let [key left__8669] (clojure.core/let [left__8670 (clojure.core/next left__8668)] (if (clojure.core/not= nil left__8670) (clojure.core/let [left__8671 (clojure.core/first left__8670)] ((.match-fn pattern) left__8671 (clojure.core/fn [output__8672 rest__8673] (clojure.core/let [pattern output__8672] (if (clojure.core/= nil rest__8673) (clojure.core/let [left__8674 (clojure.core/next left__8670)] (if (clojure.core/= nil left__8674) (clojure.core/let [output__8667 [key pattern]] (.invoke true-cont__8665 output__8667 nil)) (.invoke false-cont__8666))) (.invoke false-cont__8666)))) (clojure.core/fn [] (.invoke false-cont__8666)))) (.invoke false-cont__8666))))) (.invoke false-cont__8666))) (.invoke false-cont__8666))))))) (def pattern (quote (clojure.core/letfn [(thunk__8686 [input__8675 true-cont__8676 false-cont__8677] (if (seq? input__8675) (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8679 (clojure.core/seq input__8675)] (if (clojure.core/not= nil left__8679) (clojure.core/let [left__8680 (clojure.core/first left__8679)] (clojure.core/let [match left__8680] (clojure.core/let [left__8681 (clojure.core/next left__8679)] (if (clojure.core/not= nil left__8681) (clojure.core/let [left__8682 (clojure.core/first left__8681)] ((.match-fn pattern) left__8682 (clojure.core/fn [output__8683 rest__8684] (clojure.core/let [pattern output__8683] (if (clojure.core/= nil rest__8684) (clojure.core/let [left__8685 (clojure.core/next left__8681)] (if (clojure.core/= nil left__8685) (clojure.core/let [output__8678 (import-ast match pattern)] (.invoke true-cont__8676 output__8678 nil)) (.invoke false-cont__8677))) (.invoke false-cont__8677)))) (clojure.core/fn [] (.invoke false-cont__8677)))) (.invoke false-cont__8677))))) (.invoke false-cont__8677))) (.invoke false-cont__8677)) (.invoke false-cont__8677))) (thunk__8687 [input__8675 true-cont__8676 false-cont__8677] (if (symbol? input__8675) (clojure.core/let [variable input__8675] (clojure.core/let [output__8678 (literal-ast variable)] (.invoke true-cont__8676 output__8678 nil))) (thunk__8686 input__8675 true-cont__8676 false-cont__8677))) (thunk__8693 [input__8675 true-cont__8676 false-cont__8677] (if (seq? input__8675) (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8688 (clojure.core/seq input__8675)] (if (clojure.core/not= nil left__8688) (clojure.core/let [left__8689 (clojure.core/first left__8688)] (if (clojure.core/= (quote or) left__8689) (clojure.core/let [left__8690 (clojure.core/next left__8688)] ((.match-fn (one-or-more pattern)) left__8690 (clojure.core/fn [output__8691 rest__8692] (clojure.core/let [patterns output__8691] (if (clojure.core/= nil rest__8692) (clojure.core/let [output__8678 (apply or-ast patterns)] (.invoke true-cont__8676 output__8678 nil)) (thunk__8687 input__8675 true-cont__8676 false-cont__8677)))) (clojure.core/fn [] (thunk__8687 input__8675 true-cont__8676 false-cont__8677)))) (thunk__8687 input__8675 true-cont__8676 false-cont__8677))) (thunk__8687 input__8675 true-cont__8676 false-cont__8677))) (thunk__8687 input__8675 true-cont__8676 false-cont__8677)) (thunk__8687 input__8675 true-cont__8676 false-cont__8677))) (thunk__8699 [input__8675 true-cont__8676 false-cont__8677] (if (seq? input__8675) (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8694 (clojure.core/seq input__8675)] (if (clojure.core/not= nil left__8694) (clojure.core/let [left__8695 (clojure.core/first left__8694)] (if (clojure.core/= (quote seq) left__8695) (clojure.core/let [left__8696 (clojure.core/next left__8694)] ((.match-fn (one-or-more pattern)) left__8696 (clojure.core/fn [output__8697 rest__8698] (clojure.core/let [patterns output__8697] (if (clojure.core/= nil rest__8698) (clojure.core/let [output__8678 (apply seq-ast patterns)] (.invoke true-cont__8676 output__8678 nil)) (thunk__8693 input__8675 true-cont__8676 false-cont__8677)))) (clojure.core/fn [] (thunk__8693 input__8675 true-cont__8676 false-cont__8677)))) (thunk__8693 input__8675 true-cont__8676 false-cont__8677))) (thunk__8693 input__8675 true-cont__8676 false-cont__8677))) (thunk__8693 input__8675 true-cont__8676 false-cont__8677)) (thunk__8693 input__8675 true-cont__8676 false-cont__8677))) (thunk__8705 [input__8675 true-cont__8676 false-cont__8677] (if (seq? input__8675) (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8700 (clojure.core/seq input__8675)] (if (clojure.core/not= nil left__8700) (clojure.core/let [left__8701 (clojure.core/first left__8700)] (if (clojure.core/= (quote and) left__8701) (clojure.core/let [left__8702 (clojure.core/next left__8700)] ((.match-fn (one-or-more pattern)) left__8702 (clojure.core/fn [output__8703 rest__8704] (clojure.core/let [patterns output__8703] (if (clojure.core/= nil rest__8704) (clojure.core/let [output__8678 (apply and-ast patterns)] (.invoke true-cont__8676 output__8678 nil)) (thunk__8699 input__8675 true-cont__8676 false-cont__8677)))) (clojure.core/fn [] (thunk__8699 input__8675 true-cont__8676 false-cont__8677)))) (thunk__8699 input__8675 true-cont__8676 false-cont__8677))) (thunk__8699 input__8675 true-cont__8676 false-cont__8677))) (thunk__8699 input__8675 true-cont__8676 false-cont__8677)) (thunk__8699 input__8675 true-cont__8676 false-cont__8677))) (thunk__8711 [input__8675 true-cont__8676 false-cont__8677] (if (seq? input__8675) (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8706 (clojure.core/seq input__8675)] (if (clojure.core/not= nil left__8706) (clojure.core/let [left__8707 (clojure.core/first left__8706)] (if (clojure.core/= (quote leave) left__8707) (clojure.core/let [left__8708 (clojure.core/next left__8706)] (if (clojure.core/not= nil left__8708) (clojure.core/let [left__8709 (clojure.core/first left__8708)] (clojure.core/let [form left__8709] (clojure.core/let [left__8710 (clojure.core/next left__8708)] (if (clojure.core/= nil left__8710) (clojure.core/let [output__8678 (->Leave form)] (.invoke true-cont__8676 output__8678 nil)) (thunk__8705 input__8675 true-cont__8676 false-cont__8677))))) (thunk__8705 input__8675 true-cont__8676 false-cont__8677))) (thunk__8705 input__8675 true-cont__8676 false-cont__8677))) (thunk__8705 input__8675 true-cont__8676 false-cont__8677))) (thunk__8705 input__8675 true-cont__8676 false-cont__8677)) (thunk__8705 input__8675 true-cont__8676 false-cont__8677))) (thunk__8717 [input__8675 true-cont__8676 false-cont__8677] (if (seq? input__8675) (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8712 (clojure.core/seq input__8675)] (if (clojure.core/not= nil left__8712) (clojure.core/let [left__8713 (clojure.core/first left__8712)] (if (clojure.core/= (quote guard) left__8713) (clojure.core/let [left__8714 (clojure.core/next left__8712)] (if (clojure.core/not= nil left__8714) (clojure.core/let [left__8715 (clojure.core/first left__8714)] (clojure.core/let [form left__8715] (clojure.core/let [left__8716 (clojure.core/next left__8714)] (if (clojure.core/= nil left__8716) (clojure.core/let [output__8678 (->Guard form)] (.invoke true-cont__8676 output__8678 nil)) (thunk__8711 input__8675 true-cont__8676 false-cont__8677))))) (thunk__8711 input__8675 true-cont__8676 false-cont__8677))) (thunk__8711 input__8675 true-cont__8676 false-cont__8677))) (thunk__8711 input__8675 true-cont__8676 false-cont__8677))) (thunk__8711 input__8675 true-cont__8676 false-cont__8677)) (thunk__8711 input__8675 true-cont__8676 false-cont__8677))) (thunk__8723 [input__8675 true-cont__8676 false-cont__8677] (if (seq? input__8675) (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8718 (clojure.core/seq input__8675)] (if (clojure.core/not= nil left__8718) (clojure.core/let [left__8719 (clojure.core/first left__8718)] (if (clojure.core/= (quote quote) left__8719) (clojure.core/let [left__8720 (clojure.core/next left__8718)] (if (clojure.core/not= nil left__8720) (clojure.core/let [left__8721 (clojure.core/first left__8720)] (clojure.core/let [quoted left__8721] (clojure.core/let [left__8722 (clojure.core/next left__8720)] (if (clojure.core/= nil left__8722) (clojure.core/let [output__8678 (literal-ast (clojure.core/seq (clojure.core/concat (clojure.core/list (quote quote)) (clojure.core/list quoted))))] (.invoke true-cont__8676 output__8678 nil)) (thunk__8717 input__8675 true-cont__8676 false-cont__8677))))) (thunk__8717 input__8675 true-cont__8676 false-cont__8677))) (thunk__8717 input__8675 true-cont__8676 false-cont__8677))) (thunk__8717 input__8675 true-cont__8676 false-cont__8677))) (thunk__8717 input__8675 true-cont__8676 false-cont__8677)) (thunk__8717 input__8675 true-cont__8676 false-cont__8677))) (thunk__8727 [input__8675 true-cont__8676 false-cont__8677] (if (vector? input__8675) (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8724 (clojure.core/seq input__8675)] ((.match-fn (zero-or-more seq-pattern)) left__8724 (clojure.core/fn [output__8725 rest__8726] (clojure.core/let [seq-patterns output__8725] (if (clojure.core/= nil rest__8726) (clojure.core/let [output__8678 (seqable-ast seq-patterns)] (.invoke true-cont__8676 output__8678 nil)) (thunk__8723 input__8675 true-cont__8676 false-cont__8677)))) (clojure.core/fn [] (thunk__8723 input__8675 true-cont__8676 false-cont__8677)))) (thunk__8723 input__8675 true-cont__8676 false-cont__8677)) (thunk__8723 input__8675 true-cont__8676 false-cont__8677))) (thunk__8732 [input__8675 true-cont__8676 false-cont__8677] (if (or (instance? clojure.lang.Seqable input__8675) (nil? input__8675)) (clojure.core/let [left__8729 (clojure.core/seq input__8675)] ((.match-fn (zero-or-more key&pattern)) left__8729 (clojure.core/fn [output__8730 rest__8731] (clojure.core/let [keys&patterns output__8730] (if (clojure.core/= nil rest__8731) (clojure.core/let [output__8678 (map-ast keys&patterns)] (.invoke true-cont__8676 output__8678 nil)) (thunk__8727 input__8675 true-cont__8676 false-cont__8677)))) (clojure.core/fn [] (thunk__8727 input__8675 true-cont__8676 false-cont__8677)))) (thunk__8727 input__8675 true-cont__8676 false-cont__8677))) (thunk__8733 [input__8675 true-cont__8676 false-cont__8677] (if (clojure.core/instance? clojure.lang.PersistentHashMap input__8675) (thunk__8732 input__8675 true-cont__8676 false-cont__8677) (thunk__8727 input__8675 true-cont__8676 false-cont__8677))) (thunk__8734 [input__8675 true-cont__8676 false-cont__8677] (if (clojure.core/instance? clojure.lang.PersistentArrayMap input__8675) (thunk__8732 input__8675 true-cont__8676 false-cont__8677) (thunk__8733 input__8675 true-cont__8676 false-cont__8677))) (thunk__8735 [input__8675 true-cont__8676 false-cont__8677] (if (class-name? input__8675) (clojure.core/let [class-name input__8675] (clojure.core/let [output__8678 (class-ast class-name)] (.invoke true-cont__8676 output__8678 nil))) (thunk__8734 input__8675 true-cont__8676 false-cont__8677))) (thunk__8736 [input__8675 true-cont__8676 false-cont__8677] (if (primitive? input__8675) (clojure.core/let [literal input__8675] (clojure.core/let [output__8678 (literal-ast literal)] (.invoke true-cont__8676 output__8678 nil))) (thunk__8735 input__8675 true-cont__8676 false-cont__8677))) (thunk__8737 [input__8675 true-cont__8676 false-cont__8677] (if (binding? input__8675) (clojure.core/let [binding input__8675] (clojure.core/let [output__8678 (->Bind (binding-name binding))] (.invoke true-cont__8676 output__8678 nil))) (thunk__8736 input__8675 true-cont__8676 false-cont__8677)))] (strucjure/->Match (clojure.core/fn [input__8675 true-cont__8676 false-cont__8677] (if (clojure.core/= (quote _) input__8675) (clojure.core/let [output__8678 (->Leave nil)] (.invoke true-cont__8676 output__8678 nil)) (thunk__8737 input__8675 true-cont__8676 false-cont__8677))))))) (def seq-pattern (quote (clojure.core/letfn [(thunk__8744 [input__8738 true-cont__8739 false-cont__8740] ((.match-fn pattern) input__8738 (clojure.core/fn [output__8742 rest__8743] (clojure.core/let [pattern output__8742] (clojure.core/let [output__8741 (head-ast pattern)] (.invoke true-cont__8739 output__8741 rest__8743)))) (clojure.core/fn [] (.invoke false-cont__8740)))) (thunk__8750 [input__8738 true-cont__8739 false-cont__8740] (if (seq? input__8738) (if (or (instance? clojure.lang.Seqable input__8738) (nil? input__8738)) (clojure.core/let [left__8745 (clojure.core/seq input__8738)] (if (clojure.core/not= nil left__8745) (clojure.core/let [left__8746 (clojure.core/first left__8745)] (if (clojure.core/= (quote guard) left__8746) (clojure.core/let [left__8747 (clojure.core/next left__8745)] (if (clojure.core/not= nil left__8747) (clojure.core/let [left__8748 (clojure.core/first left__8747)] (clojure.core/let [form left__8748] (clojure.core/let [left__8749 (clojure.core/next left__8747)] (if (clojure.core/= nil left__8749) (clojure.core/let [output__8741 (->Guard form)] (.invoke true-cont__8739 output__8741 nil)) (thunk__8744 input__8738 true-cont__8739 false-cont__8740))))) (thunk__8744 input__8738 true-cont__8739 false-cont__8740))) (thunk__8744 input__8738 true-cont__8739 false-cont__8740))) (thunk__8744 input__8738 true-cont__8739 false-cont__8740))) (thunk__8744 input__8738 true-cont__8739 false-cont__8740)) (thunk__8744 input__8738 true-cont__8739 false-cont__8740)))] (strucjure/->Match (clojure.core/fn [input__8738 true-cont__8739 false-cont__8740] (if (seq? input__8738) (if (or (instance? clojure.lang.Seqable input__8738) (nil? input__8738)) (clojure.core/let [left__8751 (clojure.core/seq input__8738)] (if (clojure.core/not= nil left__8751) (clojure.core/let [left__8752 (clojure.core/first left__8751)] (if (clojure.core/= (quote &) left__8752) (clojure.core/let [left__8753 (clojure.core/next left__8751)] (if (clojure.core/not= nil left__8753) (clojure.core/let [left__8754 (clojure.core/first left__8753)] ((.match-fn pattern) left__8754 (clojure.core/fn [output__8755 rest__8756] (clojure.core/let [pattern output__8755] (if (clojure.core/= nil rest__8756) (clojure.core/let [left__8757 (clojure.core/next left__8753)] (if (clojure.core/= nil left__8757) (clojure.core/let [output__8741 pattern] (.invoke true-cont__8739 output__8741 nil)) (thunk__8750 input__8738 true-cont__8739 false-cont__8740))) (thunk__8750 input__8738 true-cont__8739 false-cont__8740)))) (clojure.core/fn [] (thunk__8750 input__8738 true-cont__8739 false-cont__8740)))) (thunk__8750 input__8738 true-cont__8739 false-cont__8740))) (thunk__8750 input__8738 true-cont__8739 false-cont__8740))) (thunk__8750 input__8738 true-cont__8739 false-cont__8740))) (thunk__8750 input__8738 true-cont__8739 false-cont__8740)) (thunk__8750 input__8738 true-cont__8739 false-cont__8740)))))))
